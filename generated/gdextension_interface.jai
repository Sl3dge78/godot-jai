//
// This file was auto-generated using the following command:
//
// jai generate_interface.jai
//

// Translated by hand
ClassConstructor :: #type () -> ObjectPtr #c_call;
InterfaceGetProcAddress :: #type (p_function_name: *u8) -> *void #c_call;
InitializationFunction :: #type (p_get_proc_address: InterfaceGetProcAddress, p_library: ClassLibraryPtr, r_initialization: *Initialization) -> Bool #c_call;

wchar_t :: u16;

// Automatic translation



char32_t :: u32;
char16_t :: u16;

/* VARIANT TYPES */
VariantType :: enum u32 {
    NIL                  :: 0;
    BOOL                 :: 1;
    INT                  :: 2;
    FLOAT                :: 3;
    STRING               :: 4;
    VECTOR2              :: 5;
    VECTOR2I             :: 6;
    RECT2                :: 7;
    RECT2I               :: 8;
    VECTOR3              :: 9;
    VECTOR3I             :: 10;
    TRANSFORM2D          :: 11;
    VECTOR4              :: 12;
    VECTOR4I             :: 13;
    PLANE                :: 14;
    QUATERNION           :: 15;
    AABB                 :: 16;
    BASIS                :: 17;
    TRANSFORM3D          :: 18;
    PROJECTION           :: 19;
    COLOR                :: 20;
    STRING_NAME          :: 21;
    NODE_PATH            :: 22;
    RID                  :: 23;
    OBJECT               :: 24;
    CALLABLE             :: 25;
    SIGNAL               :: 26;
    DICTIONARY           :: 27;
    ARRAY                :: 28;
    PACKED_BYTE_ARRAY    :: 29;
    PACKED_INT32_ARRAY   :: 30;
    PACKED_INT64_ARRAY   :: 31;
    PACKED_FLOAT32_ARRAY :: 32;
    PACKED_FLOAT64_ARRAY :: 33;
    PACKED_STRING_ARRAY  :: 34;
    PACKED_VECTOR2_ARRAY :: 35;
    PACKED_VECTOR3_ARRAY :: 36;
    PACKED_COLOR_ARRAY   :: 37;
    PACKED_VECTOR4_ARRAY :: 38;
    VARIANT_MAX          :: 39;

    GDEXTENSION_VARIANT_TYPE_NIL                  :: NIL;
    GDEXTENSION_VARIANT_TYPE_BOOL                 :: BOOL;
    GDEXTENSION_VARIANT_TYPE_INT                  :: INT;
    GDEXTENSION_VARIANT_TYPE_FLOAT                :: FLOAT;
    GDEXTENSION_VARIANT_TYPE_STRING               :: STRING;
    GDEXTENSION_VARIANT_TYPE_VECTOR2              :: VECTOR2;
    GDEXTENSION_VARIANT_TYPE_VECTOR2I             :: VECTOR2I;
    GDEXTENSION_VARIANT_TYPE_RECT2                :: RECT2;
    GDEXTENSION_VARIANT_TYPE_RECT2I               :: RECT2I;
    GDEXTENSION_VARIANT_TYPE_VECTOR3              :: VECTOR3;
    GDEXTENSION_VARIANT_TYPE_VECTOR3I             :: VECTOR3I;
    GDEXTENSION_VARIANT_TYPE_TRANSFORM2D          :: TRANSFORM2D;
    GDEXTENSION_VARIANT_TYPE_VECTOR4              :: VECTOR4;
    GDEXTENSION_VARIANT_TYPE_VECTOR4I             :: VECTOR4I;
    GDEXTENSION_VARIANT_TYPE_PLANE                :: PLANE;
    GDEXTENSION_VARIANT_TYPE_QUATERNION           :: QUATERNION;
    GDEXTENSION_VARIANT_TYPE_AABB                 :: AABB;
    GDEXTENSION_VARIANT_TYPE_BASIS                :: BASIS;
    GDEXTENSION_VARIANT_TYPE_TRANSFORM3D          :: TRANSFORM3D;
    GDEXTENSION_VARIANT_TYPE_PROJECTION           :: PROJECTION;
    GDEXTENSION_VARIANT_TYPE_COLOR                :: COLOR;
    GDEXTENSION_VARIANT_TYPE_STRING_NAME          :: STRING_NAME;
    GDEXTENSION_VARIANT_TYPE_NODE_PATH            :: NODE_PATH;
    GDEXTENSION_VARIANT_TYPE_RID                  :: RID;
    GDEXTENSION_VARIANT_TYPE_OBJECT               :: OBJECT;
    GDEXTENSION_VARIANT_TYPE_CALLABLE             :: CALLABLE;
    GDEXTENSION_VARIANT_TYPE_SIGNAL               :: SIGNAL;
    GDEXTENSION_VARIANT_TYPE_DICTIONARY           :: DICTIONARY;
    GDEXTENSION_VARIANT_TYPE_ARRAY                :: ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY    :: PACKED_BYTE_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY   :: PACKED_INT32_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY   :: PACKED_INT64_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY :: PACKED_FLOAT32_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY :: PACKED_FLOAT64_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY  :: PACKED_STRING_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY :: PACKED_VECTOR2_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY :: PACKED_VECTOR3_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY   :: PACKED_COLOR_ARRAY;
    GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR4_ARRAY :: PACKED_VECTOR4_ARRAY;
    GDEXTENSION_VARIANT_TYPE_VARIANT_MAX          :: VARIANT_MAX;
}

VariantOperator :: enum u32 {
    EQUAL         :: 0;
    NOT_EQUAL     :: 1;
    LESS          :: 2;
    LESS_EQUAL    :: 3;
    GREATER       :: 4;
    GREATER_EQUAL :: 5;
    ADD           :: 6;
    SUBTRACT      :: 7;
    MULTIPLY      :: 8;
    DIVIDE        :: 9;
    NEGATE        :: 10;
    POSITIVE      :: 11;
    MODULE        :: 12;
    POWER         :: 13;
    SHIFT_LEFT    :: 14;
    SHIFT_RIGHT   :: 15;
    BIT_AND       :: 16;
    BIT_OR        :: 17;
    BIT_XOR       :: 18;
    BIT_NEGATE    :: 19;
    AND           :: 20;
    OR            :: 21;
    XOR           :: 22;
    NOT           :: 23;
    IN            :: 24;
    MAX           :: 25;

    GDEXTENSION_VARIANT_OP_EQUAL         :: EQUAL;
    GDEXTENSION_VARIANT_OP_NOT_EQUAL     :: NOT_EQUAL;
    GDEXTENSION_VARIANT_OP_LESS          :: LESS;
    GDEXTENSION_VARIANT_OP_LESS_EQUAL    :: LESS_EQUAL;
    GDEXTENSION_VARIANT_OP_GREATER       :: GREATER;
    GDEXTENSION_VARIANT_OP_GREATER_EQUAL :: GREATER_EQUAL;
    GDEXTENSION_VARIANT_OP_ADD           :: ADD;
    GDEXTENSION_VARIANT_OP_SUBTRACT      :: SUBTRACT;
    GDEXTENSION_VARIANT_OP_MULTIPLY      :: MULTIPLY;
    GDEXTENSION_VARIANT_OP_DIVIDE        :: DIVIDE;
    GDEXTENSION_VARIANT_OP_NEGATE        :: NEGATE;
    GDEXTENSION_VARIANT_OP_POSITIVE      :: POSITIVE;
    GDEXTENSION_VARIANT_OP_MODULE        :: MODULE;
    GDEXTENSION_VARIANT_OP_POWER         :: POWER;
    GDEXTENSION_VARIANT_OP_SHIFT_LEFT    :: SHIFT_LEFT;
    GDEXTENSION_VARIANT_OP_SHIFT_RIGHT   :: SHIFT_RIGHT;
    GDEXTENSION_VARIANT_OP_BIT_AND       :: BIT_AND;
    GDEXTENSION_VARIANT_OP_BIT_OR        :: BIT_OR;
    GDEXTENSION_VARIANT_OP_BIT_XOR       :: BIT_XOR;
    GDEXTENSION_VARIANT_OP_BIT_NEGATE    :: BIT_NEGATE;
    GDEXTENSION_VARIANT_OP_AND           :: AND;
    GDEXTENSION_VARIANT_OP_OR            :: OR;
    GDEXTENSION_VARIANT_OP_XOR           :: XOR;
    GDEXTENSION_VARIANT_OP_NOT           :: NOT;
    GDEXTENSION_VARIANT_OP_IN            :: IN;
    GDEXTENSION_VARIANT_OP_MAX           :: MAX;
}

// In this API there are multiple functions which expect the caller to pass a pointer
// on return value as parameter.
// In order to make it clear if the caller should initialize the return value or not
// we have two flavor of types:
// - `GDExtensionXXXPtr` for pointer on an initialized value
// - `GDExtensionUninitializedXXXPtr` for pointer on uninitialized value
//
// Notes:
// - Not respecting those requirements can seems harmless, but will lead to unexpected
//   segfault or memory leak (for instance with a specific compiler/OS, or when two
//   native extensions start doing ptrcall on each other).
// - Initialization must be done with the function pointer returned by `variant_get_ptr_constructor`,
//   zero-initializing the variable should not be considered a valid initialization method here !
// - Some types have no destructor (see `extension_api.json`'s `has_destructor` field), for
//   them it is always safe to skip the constructor for the return value if you are in a hurry ;-)
VariantPtr :: *void;
ConstVariantPtr :: *void;
UninitializedVariantPtr :: *void;
StringNamePtr :: *void;
ConstStringNamePtr :: *void;
UninitializedStringNamePtr :: *void;
StringPtr :: *void;
ConstStringPtr :: *void;
UninitializedStringPtr :: *void;
ObjectPtr :: *void;
ConstObjectPtr :: *void;
UninitializedObjectPtr :: *void;
TypePtr :: *void;
ConstTypePtr :: *void;
UninitializedTypePtr :: *void;
MethodBindPtr :: *void;
Int :: s64;
Bool :: u8;
GDObjectInstanceID :: u64;
RefPtr :: *void;
ConstRefPtr :: *void;

/* VARIANT DATA I/O */
CallErrorType :: enum u32 {
    OK                       :: 0;
    ERROR_INVALID_METHOD     :: 1;
    ERROR_INVALID_ARGUMENT   :: 2;
    ERROR_TOO_MANY_ARGUMENTS :: 3;
    ERROR_TOO_FEW_ARGUMENTS  :: 4;
    ERROR_INSTANCE_IS_NULL   :: 5;
    ERROR_METHOD_NOT_CONST   :: 6;

    GDEXTENSION_CALL_OK                       :: OK;
    GDEXTENSION_CALL_ERROR_INVALID_METHOD     :: ERROR_INVALID_METHOD;
    GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT   :: ERROR_INVALID_ARGUMENT;
    GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS :: ERROR_TOO_MANY_ARGUMENTS;
    GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS  :: ERROR_TOO_FEW_ARGUMENTS;
    GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL   :: ERROR_INSTANCE_IS_NULL;
    GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST   :: ERROR_METHOD_NOT_CONST;
}

CallError :: struct {
    error:    CallErrorType;
    argument: s32;
    expected: s32;
}

VariantFromTypeConstructorFunc :: #type (unknown0: UninitializedVariantPtr, unknown1: TypePtr) -> void #c_call;
TypeFromVariantConstructorFunc :: #type (unknown0: UninitializedTypePtr, unknown1: VariantPtr) -> void #c_call;
PtrOperatorEvaluator :: #type (p_left: ConstTypePtr, p_right: ConstTypePtr, r_result: TypePtr) -> void #c_call;
PtrBuiltInMethod :: #type (p_base: TypePtr, p_args: *ConstTypePtr, r_return: TypePtr, p_argument_count: s32) -> void #c_call;
PtrConstructor :: #type (p_base: UninitializedTypePtr, p_args: *ConstTypePtr) -> void #c_call;
PtrDestructor :: #type (p_base: TypePtr) -> void #c_call;
PtrSetter :: #type (p_base: TypePtr, p_value: ConstTypePtr) -> void #c_call;
PtrGetter :: #type (p_base: ConstTypePtr, r_value: TypePtr) -> void #c_call;
PtrIndexedSetter :: #type (p_base: TypePtr, p_index: Int, p_value: ConstTypePtr) -> void #c_call;
PtrIndexedGetter :: #type (p_base: ConstTypePtr, p_index: Int, r_value: TypePtr) -> void #c_call;
PtrKeyedSetter :: #type (p_base: TypePtr, p_key: ConstTypePtr, p_value: ConstTypePtr) -> void #c_call;
PtrKeyedGetter :: #type (p_base: ConstTypePtr, p_key: ConstTypePtr, r_value: TypePtr) -> void #c_call;
PtrKeyedChecker :: #type (p_base: ConstVariantPtr, p_key: ConstVariantPtr) -> u32 #c_call;
PtrUtilityFunction :: #type (r_return: TypePtr, p_args: *ConstTypePtr, p_argument_count: s32) -> void #c_call;

InstanceBindingCreateCallback :: #type (p_token: *void, p_instance: *void) -> *void #c_call;
InstanceBindingFreeCallback :: #type (p_token: *void, p_instance: *void, p_binding: *void) -> void #c_call;
InstanceBindingReferenceCallback :: #type (p_token: *void, p_binding: *void, p_reference: Bool) -> Bool #c_call;

InstanceBindingCallbacks :: struct {
    create_callback:    InstanceBindingCreateCallback;
    free_callback:      InstanceBindingFreeCallback;
    reference_callback: InstanceBindingReferenceCallback;
}

/* EXTENSION CLASSES */
ClassInstancePtr :: *void;

ClassSet :: #type (p_instance: ClassInstancePtr, p_name: ConstStringNamePtr, p_value: ConstVariantPtr) -> Bool #c_call;
ClassGet :: #type (p_instance: ClassInstancePtr, p_name: ConstStringNamePtr, r_ret: VariantPtr) -> Bool #c_call;
ClassGetRID :: #type (p_instance: ClassInstancePtr) -> u64 #c_call;

PropertyInfo :: struct {
    type:        VariantType;
    name:        StringNamePtr;
    class_name:  StringNamePtr;
    hint:        u32; // Bitfield of `PropertyHint` (defined in `extension_api.json`).
    hint_string: StringPtr;
    usage:       u32; // Bitfield of `PropertyUsageFlags` (defined in `extension_api.json`).
}

MethodInfo :: struct {
    name:                   StringNamePtr;
    return_value:           PropertyInfo;
    flags:                  u32; // Bitfield of `GDExtensionClassMethodFlags`.
    id:                     s32;
    /* Arguments: `default_arguments` is an array of size `argument_count`. */
    argument_count:         u32;
    arguments:              *PropertyInfo;
    /* Default arguments: `default_arguments` is an array of size `default_argument_count`. */
    default_argument_count: u32;
    default_arguments:      *VariantPtr;
}

ClassGetPropertyList :: #type (p_instance: ClassInstancePtr, r_count: *u32) -> *PropertyInfo #c_call;
ClassFreePropertyList :: #type (p_instance: ClassInstancePtr, p_list: *PropertyInfo) -> void #c_call;
ClassFreePropertyList2 :: #type (p_instance: ClassInstancePtr, p_list: *PropertyInfo, p_count: u32) -> void #c_call;
ClassPropertyCanRevert :: #type (p_instance: ClassInstancePtr, p_name: ConstStringNamePtr) -> Bool #c_call;
ClassPropertyGetRevert :: #type (p_instance: ClassInstancePtr, p_name: ConstStringNamePtr, r_ret: VariantPtr) -> Bool #c_call;
ClassValidateProperty :: #type (p_instance: ClassInstancePtr, p_property: *PropertyInfo) -> Bool #c_call;
ClassNotification :: #type (p_instance: ClassInstancePtr, p_what: s32) -> void #c_call;
ClassNotification2 :: #type (p_instance: ClassInstancePtr, p_what: s32, p_reversed: Bool) -> void #c_call;
ClassToString :: #type (p_instance: ClassInstancePtr, r_is_valid: *Bool, p_out: StringPtr) -> void #c_call;
ClassReference :: #type (p_instance: ClassInstancePtr) -> void #c_call;
ClassUnreference :: #type (p_instance: ClassInstancePtr) -> void #c_call;
ClassCallVirtual :: #type (p_instance: ClassInstancePtr, p_args: *ConstTypePtr, r_ret: TypePtr) -> void #c_call;
ClassCreateInstance :: #type (p_class_userdata: *void) -> ObjectPtr #c_call;
ClassFreeInstance :: #type (p_class_userdata: *void, p_instance: ClassInstancePtr) -> void #c_call;
ClassRecreateInstance :: #type (p_class_userdata: *void, p_object: ObjectPtr) -> ClassInstancePtr #c_call;
ClassGetVirtual :: #type (p_class_userdata: *void, p_name: ConstStringNamePtr) -> ClassCallVirtual #c_call;
ClassGetVirtualCallData :: #type (p_class_userdata: *void, p_name: ConstStringNamePtr) -> *void #c_call;
ClassCallVirtualWithData :: #type (p_instance: ClassInstancePtr, p_name: ConstStringNamePtr, p_virtual_call_userdata: *void, p_args: *ConstTypePtr, r_ret: TypePtr) -> void #c_call;

ClassCreationInfo :: struct {
    is_virtual:               Bool;
    is_abstract:              Bool;
    set_func:                 ClassSet;
    get_func:                 ClassGet;
    get_property_list_func:   ClassGetPropertyList;
    free_property_list_func:  ClassFreePropertyList;
    property_can_revert_func: ClassPropertyCanRevert;
    property_get_revert_func: ClassPropertyGetRevert;
    notification_func:        ClassNotification;
    to_string_func:           ClassToString;
    reference_func:           ClassReference;
    unreference_func:         ClassUnreference;
    create_instance_func:     ClassCreateInstance; // (Default) constructor; mandatory. If the class is not instantiable, consider making it virtual or abstract.
    free_instance_func:       ClassFreeInstance; // Destructor; mandatory.
    get_virtual_func:         ClassGetVirtual; // Queries a virtual function by name and returns a callback to invoke the requested virtual function.
    get_rid_func:             ClassGetRID;
    class_userdata:           *void; // Per-class user data, later accessible in instance bindings.
}

ClassCreationInfo2 :: struct {
    is_virtual:                  Bool;
    is_abstract:                 Bool;
    is_exposed:                  Bool;
    set_func:                    ClassSet;
    get_func:                    ClassGet;
    get_property_list_func:      ClassGetPropertyList;
    free_property_list_func:     ClassFreePropertyList;
    property_can_revert_func:    ClassPropertyCanRevert;
    property_get_revert_func:    ClassPropertyGetRevert;
    validate_property_func:      ClassValidateProperty;
    notification_func:           ClassNotification2;
    to_string_func:              ClassToString;
    reference_func:              ClassReference;
    unreference_func:            ClassUnreference;
    create_instance_func:        ClassCreateInstance; // (Default) constructor; mandatory. If the class is not instantiable, consider making it virtual or abstract.
    free_instance_func:          ClassFreeInstance; // Destructor; mandatory.
    recreate_instance_func:      ClassRecreateInstance;
    // Queries a virtual function by name and returns a callback to invoke the requested virtual function.
    get_virtual_func:            ClassGetVirtual;
    // Paired with `call_virtual_with_data_func`, this is an alternative to `get_virtual_func` for extensions that
    // need or benefit from extra data when calling virtual functions.
    // Returns user data that will be passed to `call_virtual_with_data_func`.
    // Returning `NULL` from this function signals to Godot that the virtual function is not overridden.
    // Data returned from this function should be managed by the extension and must be valid until the extension is deinitialized.
    // You should supply either `get_virtual_func`, or `get_virtual_call_data_func` with `call_virtual_with_data_func`.
    get_virtual_call_data_func:  ClassGetVirtualCallData;
    // Used to call virtual functions when `get_virtual_call_data_func` is not null.
    call_virtual_with_data_func: ClassCallVirtualWithData;
    get_rid_func:                ClassGetRID;
    class_userdata:              *void; // Per-class user data, later accessible in instance bindings.
}

ClassCreationInfo3 :: struct {
    is_virtual:                  Bool;
    is_abstract:                 Bool;
    is_exposed:                  Bool;
    is_runtime:                  Bool;
    set_func:                    ClassSet;
    get_func:                    ClassGet;
    get_property_list_func:      ClassGetPropertyList;
    free_property_list_func:     ClassFreePropertyList2;
    property_can_revert_func:    ClassPropertyCanRevert;
    property_get_revert_func:    ClassPropertyGetRevert;
    validate_property_func:      ClassValidateProperty;
    notification_func:           ClassNotification2;
    to_string_func:              ClassToString;
    reference_func:              ClassReference;
    unreference_func:            ClassUnreference;
    create_instance_func:        ClassCreateInstance; // (Default) constructor; mandatory. If the class is not instantiable, consider making it virtual or abstract.
    free_instance_func:          ClassFreeInstance; // Destructor; mandatory.
    recreate_instance_func:      ClassRecreateInstance;
    // Queries a virtual function by name and returns a callback to invoke the requested virtual function.
    get_virtual_func:            ClassGetVirtual;
    // Paired with `call_virtual_with_data_func`, this is an alternative to `get_virtual_func` for extensions that
    // need or benefit from extra data when calling virtual functions.
    // Returns user data that will be passed to `call_virtual_with_data_func`.
    // Returning `NULL` from this function signals to Godot that the virtual function is not overridden.
    // Data returned from this function should be managed by the extension and must be valid until the extension is deinitialized.
    // You should supply either `get_virtual_func`, or `get_virtual_call_data_func` with `call_virtual_with_data_func`.
    get_virtual_call_data_func:  ClassGetVirtualCallData;
    // Used to call virtual functions when `get_virtual_call_data_func` is not null.
    call_virtual_with_data_func: ClassCallVirtualWithData;
    get_rid_func:                ClassGetRID;
    class_userdata:              *void; // Per-class user data, later accessible in instance bindings.
}

ClassLibraryPtr :: *void;

/* Method */
ClassMethodFlags :: enum u32 {
    FLAG_NORMAL   :: 1;
    FLAG_EDITOR   :: 2;
    FLAG_CONST    :: 4;
    FLAG_VIRTUAL  :: 8;
    FLAG_VARARG   :: 16;
    FLAG_STATIC   :: 32;
    FLAGS_DEFAULT :: 1;

    GDEXTENSION_METHOD_FLAG_NORMAL   :: FLAG_NORMAL;
    GDEXTENSION_METHOD_FLAG_EDITOR   :: FLAG_EDITOR;
    GDEXTENSION_METHOD_FLAG_CONST    :: FLAG_CONST;
    GDEXTENSION_METHOD_FLAG_VIRTUAL  :: FLAG_VIRTUAL;
    GDEXTENSION_METHOD_FLAG_VARARG   :: FLAG_VARARG;
    GDEXTENSION_METHOD_FLAG_STATIC   :: FLAG_STATIC;
    GDEXTENSION_METHOD_FLAGS_DEFAULT :: FLAGS_DEFAULT;
}

ClassMethodArgumentMetadata :: enum u32 {
    NONE           :: 0;
    INT_IS_INT8    :: 1;
    INT_IS_INT16   :: 2;
    INT_IS_INT32   :: 3;
    INT_IS_INT64   :: 4;
    INT_IS_UINT8   :: 5;
    INT_IS_UINT16  :: 6;
    INT_IS_UINT32  :: 7;
    INT_IS_UINT64  :: 8;
    REAL_IS_FLOAT  :: 9;
    REAL_IS_DOUBLE :: 10;

    GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE           :: NONE;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8    :: INT_IS_INT8;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16   :: INT_IS_INT16;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32   :: INT_IS_INT32;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64   :: INT_IS_INT64;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8   :: INT_IS_UINT8;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16  :: INT_IS_UINT16;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32  :: INT_IS_UINT32;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64  :: INT_IS_UINT64;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT  :: REAL_IS_FLOAT;
    GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE :: REAL_IS_DOUBLE;
}

ClassMethodCall :: #type (method_userdata: *void, p_instance: ClassInstancePtr, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: VariantPtr, r_error: *CallError) -> void #c_call;
ClassMethodValidatedCall :: #type (method_userdata: *void, p_instance: ClassInstancePtr, p_args: *ConstVariantPtr, r_return: VariantPtr) -> void #c_call;
ClassMethodPtrCall :: #type (method_userdata: *void, p_instance: ClassInstancePtr, p_args: *ConstTypePtr, r_ret: TypePtr) -> void #c_call;

ClassMethodInfo :: struct {
    name:                   StringNamePtr;
    method_userdata:        *void;
    call_func:              ClassMethodCall;
    ptrcall_func:           ClassMethodPtrCall;
    method_flags:           u32; // Bitfield of `GDExtensionClassMethodFlags`.
    /* If `has_return_value` is false, `return_value_info` and `return_value_metadata` are ignored.
    *
    * @todo Consider dropping `has_return_value` and making the other two properties match `GDExtensionMethodInfo` and `GDExtensionClassVirtualMethod` for consistency in future version of this struct.
    */
    has_return_value:       Bool;
    return_value_info:      *PropertyInfo;
    return_value_metadata:  ClassMethodArgumentMetadata;
    /* Arguments: `arguments_info` and `arguments_metadata` are array of size `argument_count`.
    * Name and hint information for the argument can be omitted in release builds. Class name should always be present if it applies.
    *
    * @todo Consider renaming `arguments_info` to `arguments` for consistency in future version of this struct.
    */
    argument_count:         u32;
    arguments_info:         *PropertyInfo;
    arguments_metadata:     *ClassMethodArgumentMetadata;
    /* Default arguments: `default_arguments` is an array of size `default_argument_count`. */
    default_argument_count: u32;
    default_arguments:      *VariantPtr;
}

ClassVirtualMethodInfo :: struct {
    name:                  StringNamePtr;
    method_flags:          u32; // Bitfield of `GDExtensionClassMethodFlags`.
    return_value:          PropertyInfo;
    return_value_metadata: ClassMethodArgumentMetadata;
    argument_count:        u32;
    arguments:             *PropertyInfo;
    arguments_metadata:    *ClassMethodArgumentMetadata;
}

CallableCustomCall :: #type (callable_userdata: *void, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: VariantPtr, r_error: *CallError) -> void #c_call;
CallableCustomIsValid :: #type (callable_userdata: *void) -> Bool #c_call;
CallableCustomFree :: #type (callable_userdata: *void) -> void #c_call;

CallableCustomHash :: #type (callable_userdata: *void) -> u32 #c_call;
CallableCustomEqual :: #type (callable_userdata_a: *void, callable_userdata_b: *void) -> Bool #c_call;
CallableCustomLessThan :: #type (callable_userdata_a: *void, callable_userdata_b: *void) -> Bool #c_call;

CallableCustomToString :: #type (callable_userdata: *void, r_is_valid: *Bool, r_out: StringPtr) -> void #c_call;

CallableCustomGetArgumentCount :: #type (callable_userdata: *void, r_is_valid: *Bool) -> Int #c_call;

CallableCustomInfo :: struct {
    /* Only `call_func` and `token` are strictly required, however, `object_id` should be passed if its not a static method.
    *
    * `token` should point to an address that uniquely identifies the GDExtension (for example, the
    * `GDExtensionClassLibraryPtr` passed to the entry symbol function.
    *
    * `hash_func`, `equal_func`, and `less_than_func` are optional. If not provided both `call_func` and
    * `callable_userdata` together are used as the identity of the callable for hashing and comparison purposes.
    *
    * The hash returned by `hash_func` is cached, `hash_func` will not be called more than once per callable.
    *
    * `is_valid_func` is necessary if the validity of the callable can change before destruction.
    *
    * `free_func` is necessary if `callable_userdata` needs to be cleaned up when the callable is freed.
    */
    callable_userdata: *void;
    token:             *void;
    object_id:         GDObjectInstanceID;
    call_func:         CallableCustomCall;
    is_valid_func:     CallableCustomIsValid;
    free_func:         CallableCustomFree;
    hash_func:         CallableCustomHash;
    equal_func:        CallableCustomEqual;
    less_than_func:    CallableCustomLessThan;
    to_string_func:    CallableCustomToString;
}

CallableCustomInfo2 :: struct {
    /* Only `call_func` and `token` are strictly required, however, `object_id` should be passed if its not a static method.
    *
    * `token` should point to an address that uniquely identifies the GDExtension (for example, the
    * `GDExtensionClassLibraryPtr` passed to the entry symbol function.
    *
    * `hash_func`, `equal_func`, and `less_than_func` are optional. If not provided both `call_func` and
    * `callable_userdata` together are used as the identity of the callable for hashing and comparison purposes.
    *
    * The hash returned by `hash_func` is cached, `hash_func` will not be called more than once per callable.
    *
    * `is_valid_func` is necessary if the validity of the callable can change before destruction.
    *
    * `free_func` is necessary if `callable_userdata` needs to be cleaned up when the callable is freed.
    */
    callable_userdata:       *void;
    token:                   *void;
    object_id:               GDObjectInstanceID;
    call_func:               CallableCustomCall;
    is_valid_func:           CallableCustomIsValid;
    free_func:               CallableCustomFree;
    hash_func:               CallableCustomHash;
    equal_func:              CallableCustomEqual;
    less_than_func:          CallableCustomLessThan;
    to_string_func:          CallableCustomToString;
    get_argument_count_func: CallableCustomGetArgumentCount;
}

/* SCRIPT INSTANCE EXTENSION */
ScriptInstanceDataPtr :: *void;

ScriptInstanceSet :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr, p_value: ConstVariantPtr) -> Bool #c_call;
ScriptInstanceGet :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr, r_ret: VariantPtr) -> Bool #c_call;
ScriptInstanceGetPropertyList :: #type (p_instance: ScriptInstanceDataPtr, r_count: *u32) -> *PropertyInfo #c_call;
ScriptInstanceFreePropertyList :: #type (p_instance: ScriptInstanceDataPtr, p_list: *PropertyInfo) -> void #c_call;
ScriptInstanceFreePropertyList2 :: #type (p_instance: ScriptInstanceDataPtr, p_list: *PropertyInfo, p_count: u32) -> void #c_call;
ScriptInstanceGetClassCategory :: #type (p_instance: ScriptInstanceDataPtr, p_class_category: *PropertyInfo) -> Bool #c_call;

ScriptInstanceGetPropertyType :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr, r_is_valid: *Bool) -> VariantType #c_call;
ScriptInstanceValidateProperty :: #type (p_instance: ScriptInstanceDataPtr, p_property: *PropertyInfo) -> Bool #c_call;

ScriptInstancePropertyCanRevert :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr) -> Bool #c_call;
ScriptInstancePropertyGetRevert :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr, r_ret: VariantPtr) -> Bool #c_call;

ScriptInstanceGetOwner :: #type (p_instance: ScriptInstanceDataPtr) -> ObjectPtr #c_call;
ScriptInstancePropertyStateAdd :: #type (p_name: ConstStringNamePtr, p_value: ConstVariantPtr, p_userdata: *void) -> void #c_call;
ScriptInstanceGetPropertyState :: #type (p_instance: ScriptInstanceDataPtr, p_add_func: ScriptInstancePropertyStateAdd, p_userdata: *void) -> void #c_call;

ScriptInstanceGetMethodList :: #type (p_instance: ScriptInstanceDataPtr, r_count: *u32) -> *MethodInfo #c_call;
ScriptInstanceFreeMethodList :: #type (p_instance: ScriptInstanceDataPtr, p_list: *MethodInfo) -> void #c_call;
ScriptInstanceFreeMethodList2 :: #type (p_instance: ScriptInstanceDataPtr, p_list: *MethodInfo, p_count: u32) -> void #c_call;

ScriptInstanceHasMethod :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr) -> Bool #c_call;

ScriptInstanceGetMethodArgumentCount :: #type (p_instance: ScriptInstanceDataPtr, p_name: ConstStringNamePtr, r_is_valid: *Bool) -> Int #c_call;

ScriptInstanceCall :: #type (p_self: ScriptInstanceDataPtr, p_method: ConstStringNamePtr, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: VariantPtr, r_error: *CallError) -> void #c_call;
ScriptInstanceNotification :: #type (p_instance: ScriptInstanceDataPtr, p_what: s32) -> void #c_call;
ScriptInstanceNotification2 :: #type (p_instance: ScriptInstanceDataPtr, p_what: s32, p_reversed: Bool) -> void #c_call;
ScriptInstanceToString :: #type (p_instance: ScriptInstanceDataPtr, r_is_valid: *Bool, r_out: StringPtr) -> void #c_call;

ScriptInstanceRefCountIncremented :: #type (p_instance: ScriptInstanceDataPtr) -> void #c_call;
ScriptInstanceRefCountDecremented :: #type (p_instance: ScriptInstanceDataPtr) -> Bool #c_call;

ScriptInstanceGetScript :: #type (p_instance: ScriptInstanceDataPtr) -> ObjectPtr #c_call;
ScriptInstanceIsPlaceholder :: #type (p_instance: ScriptInstanceDataPtr) -> Bool #c_call;

ScriptLanguagePtr :: *void;

ScriptInstanceGetLanguage :: #type (p_instance: ScriptInstanceDataPtr) -> ScriptLanguagePtr #c_call;

ScriptInstanceFree :: #type (p_instance: ScriptInstanceDataPtr) -> void #c_call;

ScriptInstancePtr :: *void;

ScriptInstanceInfo :: struct {
    set_func:                  ScriptInstanceSet;
    get_func:                  ScriptInstanceGet;
    get_property_list_func:    ScriptInstanceGetPropertyList;
    free_property_list_func:   ScriptInstanceFreePropertyList;
    property_can_revert_func:  ScriptInstancePropertyCanRevert;
    property_get_revert_func:  ScriptInstancePropertyGetRevert;
    get_owner_func:            ScriptInstanceGetOwner;
    get_property_state_func:   ScriptInstanceGetPropertyState;
    get_method_list_func:      ScriptInstanceGetMethodList;
    free_method_list_func:     ScriptInstanceFreeMethodList;
    get_property_type_func:    ScriptInstanceGetPropertyType;
    has_method_func:           ScriptInstanceHasMethod;
    call_func:                 ScriptInstanceCall;
    notification_func:         ScriptInstanceNotification;
    to_string_func:            ScriptInstanceToString;
    refcount_incremented_func: ScriptInstanceRefCountIncremented;
    refcount_decremented_func: ScriptInstanceRefCountDecremented;
    get_script_func:           ScriptInstanceGetScript;
    is_placeholder_func:       ScriptInstanceIsPlaceholder;
    set_fallback_func:         ScriptInstanceSet;
    get_fallback_func:         ScriptInstanceGet;
    get_language_func:         ScriptInstanceGetLanguage;
    free_func:                 ScriptInstanceFree;
}

ScriptInstanceInfo2 :: struct {
    set_func:                  ScriptInstanceSet;
    get_func:                  ScriptInstanceGet;
    get_property_list_func:    ScriptInstanceGetPropertyList;
    free_property_list_func:   ScriptInstanceFreePropertyList;
    get_class_category_func:   ScriptInstanceGetClassCategory; // Optional. Set to NULL for the default behavior.
    property_can_revert_func:  ScriptInstancePropertyCanRevert;
    property_get_revert_func:  ScriptInstancePropertyGetRevert;
    get_owner_func:            ScriptInstanceGetOwner;
    get_property_state_func:   ScriptInstanceGetPropertyState;
    get_method_list_func:      ScriptInstanceGetMethodList;
    free_method_list_func:     ScriptInstanceFreeMethodList;
    get_property_type_func:    ScriptInstanceGetPropertyType;
    validate_property_func:    ScriptInstanceValidateProperty;
    has_method_func:           ScriptInstanceHasMethod;
    call_func:                 ScriptInstanceCall;
    notification_func:         ScriptInstanceNotification2;
    to_string_func:            ScriptInstanceToString;
    refcount_incremented_func: ScriptInstanceRefCountIncremented;
    refcount_decremented_func: ScriptInstanceRefCountDecremented;
    get_script_func:           ScriptInstanceGetScript;
    is_placeholder_func:       ScriptInstanceIsPlaceholder;
    set_fallback_func:         ScriptInstanceSet;
    get_fallback_func:         ScriptInstanceGet;
    get_language_func:         ScriptInstanceGetLanguage;
    free_func:                 ScriptInstanceFree;
}

ScriptInstanceInfo3 :: struct {
    set_func:                       ScriptInstanceSet;
    get_func:                       ScriptInstanceGet;
    get_property_list_func:         ScriptInstanceGetPropertyList;
    free_property_list_func:        ScriptInstanceFreePropertyList2;
    get_class_category_func:        ScriptInstanceGetClassCategory; // Optional. Set to NULL for the default behavior.
    property_can_revert_func:       ScriptInstancePropertyCanRevert;
    property_get_revert_func:       ScriptInstancePropertyGetRevert;
    get_owner_func:                 ScriptInstanceGetOwner;
    get_property_state_func:        ScriptInstanceGetPropertyState;
    get_method_list_func:           ScriptInstanceGetMethodList;
    free_method_list_func:          ScriptInstanceFreeMethodList2;
    get_property_type_func:         ScriptInstanceGetPropertyType;
    validate_property_func:         ScriptInstanceValidateProperty;
    has_method_func:                ScriptInstanceHasMethod;
    get_method_argument_count_func: ScriptInstanceGetMethodArgumentCount;
    call_func:                      ScriptInstanceCall;
    notification_func:              ScriptInstanceNotification2;
    to_string_func:                 ScriptInstanceToString;
    refcount_incremented_func:      ScriptInstanceRefCountIncremented;
    refcount_decremented_func:      ScriptInstanceRefCountDecremented;
    get_script_func:                ScriptInstanceGetScript;
    is_placeholder_func:            ScriptInstanceIsPlaceholder;
    set_fallback_func:              ScriptInstanceSet;
    get_fallback_func:              ScriptInstanceGet;
    get_language_func:              ScriptInstanceGetLanguage;
    free_func:                      ScriptInstanceFree;
}

/* INITIALIZATION */
InitializationLevel :: enum u32 {
    INITIALIZATION_CORE      :: 0;
    INITIALIZATION_SERVERS   :: 1;
    INITIALIZATION_SCENE     :: 2;
    INITIALIZATION_EDITOR    :: 3;
    MAX_INITIALIZATION_LEVEL :: 4;

    GDEXTENSION_INITIALIZATION_CORE      :: INITIALIZATION_CORE;
    GDEXTENSION_INITIALIZATION_SERVERS   :: INITIALIZATION_SERVERS;
    GDEXTENSION_INITIALIZATION_SCENE     :: INITIALIZATION_SCENE;
    GDEXTENSION_INITIALIZATION_EDITOR    :: INITIALIZATION_EDITOR;
    GDEXTENSION_MAX_INITIALIZATION_LEVEL :: MAX_INITIALIZATION_LEVEL;
}

Initialization :: struct {
    /* Minimum initialization level required.
    * If Core or Servers, the extension needs editor or game restart to take effect */
    minimum_initialization_level: InitializationLevel;
    /* Up to the user to supply when initializing */
    userdata:                     *void;
    /* This function will be called multiple times for each initialization level. */
    initialize:                   #type (userdata: *void, p_level: InitializationLevel) -> void #c_call;
    deinitialize:                 #type (userdata: *void, p_level: InitializationLevel) -> void #c_call;
}

/* INTERFACE */
GodotVersion :: struct {
    major:   u32;
    minor:   u32;
    patch:   u32;
    _string: *u8;
}

/**
* @name get_godot_version
* @since 4.1
*
* Gets the Godot version that the GDExtension was loaded into.
*
* @param r_godot_version A pointer to the structure to write the version information into.
*/
InterfaceGetGodotVersion :: #type (r_godot_version: *GodotVersion) -> void #c_call;

/**
* @name mem_alloc
* @since 4.1
*
* Allocates memory.
*
* @param p_bytes The amount of memory to allocate in bytes.
*
* @return A pointer to the allocated memory, or NULL if unsuccessful.
*/
InterfaceMemAlloc :: #type (p_bytes: u64) -> *void #c_call;

/**
* @name mem_realloc
* @since 4.1
*
* Reallocates memory.
*
* @param p_ptr A pointer to the previously allocated memory.
* @param p_bytes The number of bytes to resize the memory block to.
*
* @return A pointer to the allocated memory, or NULL if unsuccessful.
*/
InterfaceMemRealloc :: #type (p_ptr: *void, p_bytes: u64) -> *void #c_call;

/**
* @name mem_free
* @since 4.1
*
* Frees memory.
*
* @param p_ptr A pointer to the previously allocated memory.
*/
InterfaceMemFree :: #type (p_ptr: *void) -> void #c_call;

/**
* @name print_error
* @since 4.1
*
* Logs an error to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the error.
* @param p_function The function name where the error occurred.
* @param p_file The file where the error occurred.
* @param p_line The line where the error occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintError :: #type (p_description: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name print_error_with_message
* @since 4.1
*
* Logs an error with a message to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the error.
* @param p_message The message to show along with the error.
* @param p_function The function name where the error occurred.
* @param p_file The file where the error occurred.
* @param p_line The line where the error occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintErrorWithMessage :: #type (p_description: *u8, p_message: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name print_warning
* @since 4.1
*
* Logs a warning to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the warning.
* @param p_function The function name where the warning occurred.
* @param p_file The file where the warning occurred.
* @param p_line The line where the warning occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintWarning :: #type (p_description: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name print_warning_with_message
* @since 4.1
*
* Logs a warning with a message to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the warning.
* @param p_message The message to show along with the warning.
* @param p_function The function name where the warning occurred.
* @param p_file The file where the warning occurred.
* @param p_line The line where the warning occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintWarningWithMessage :: #type (p_description: *u8, p_message: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name print_script_error
* @since 4.1
*
* Logs a script error to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the error.
* @param p_function The function name where the error occurred.
* @param p_file The file where the error occurred.
* @param p_line The line where the error occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintScriptError :: #type (p_description: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name print_script_error_with_message
* @since 4.1
*
* Logs a script error with a message to Godot's built-in debugger and to the OS terminal.
*
* @param p_description The code trigging the error.
* @param p_message The message to show along with the error.
* @param p_function The function name where the error occurred.
* @param p_file The file where the error occurred.
* @param p_line The line where the error occurred.
* @param p_editor_notify Whether or not to notify the editor.
*/
InterfacePrintScriptErrorWithMessage :: #type (p_description: *u8, p_message: *u8, p_function: *u8, p_file: *u8, p_line: s32, p_editor_notify: Bool) -> void #c_call;

/**
* @name get_native_struct_size
* @since 4.1
*
* Gets the size of a native struct (ex. ObjectID) in bytes.
*
* @param p_name A pointer to a StringName identifying the struct name.
*
* @return The size in bytes.
*/
InterfaceGetNativeStructSize :: #type (p_name: ConstStringNamePtr) -> u64 #c_call;

/**
* @name variant_new_copy
* @since 4.1
*
* Copies one Variant into a another.
*
* @param r_dest A pointer to the destination Variant.
* @param p_src A pointer to the source Variant.
*/
InterfaceVariantNewCopy :: #type (r_dest: UninitializedVariantPtr, p_src: ConstVariantPtr) -> void #c_call;

/**
* @name variant_new_nil
* @since 4.1
*
* Creates a new Variant containing nil.
*
* @param r_dest A pointer to the destination Variant.
*/
InterfaceVariantNewNil :: #type (r_dest: UninitializedVariantPtr) -> void #c_call;

/**
* @name variant_destroy
* @since 4.1
*
* Destroys a Variant.
*
* @param p_self A pointer to the Variant to destroy.
*/
InterfaceVariantDestroy :: #type (p_self: VariantPtr) -> void #c_call;

/**
* @name variant_call
* @since 4.1
*
* Calls a method on a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_method A pointer to a StringName identifying the method.
* @param p_args A pointer to a C array of Variant.
* @param p_argument_count The number of arguments.
* @param r_return A pointer a Variant which will be assigned the return value.
* @param r_error A pointer the structure which will hold error information.
*
* @see Variant::callp()
*/
InterfaceVariantCall :: #type (p_self: VariantPtr, p_method: ConstStringNamePtr, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: UninitializedVariantPtr, r_error: *CallError) -> void #c_call;

/**
* @name variant_call_static
* @since 4.1
*
* Calls a static method on a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_method A pointer to a StringName identifying the method.
* @param p_args A pointer to a C array of Variant.
* @param p_argument_count The number of arguments.
* @param r_return A pointer a Variant which will be assigned the return value.
* @param r_error A pointer the structure which will be updated with error information.
*
* @see Variant::call_static()
*/
InterfaceVariantCallStatic :: #type (p_type: VariantType, p_method: ConstStringNamePtr, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: UninitializedVariantPtr, r_error: *CallError) -> void #c_call;

/**
* @name variant_evaluate
* @since 4.1
*
* Evaluate an operator on two Variants.
*
* @param p_op The operator to evaluate.
* @param p_a The first Variant.
* @param p_b The second Variant.
* @param r_return A pointer a Variant which will be assigned the return value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @see Variant::evaluate()
*/
InterfaceVariantEvaluate :: #type (p_op: VariantOperator, p_a: ConstVariantPtr, p_b: ConstVariantPtr, r_return: UninitializedVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_set
* @since 4.1
*
* Sets a key on a Variant to a value.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a Variant representing the key.
* @param p_value A pointer to a Variant representing the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @see Variant::set()
*/
InterfaceVariantSet :: #type (p_self: VariantPtr, p_key: ConstVariantPtr, p_value: ConstVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_set_named
* @since 4.1
*
* Sets a named key on a Variant to a value.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a StringName representing the key.
* @param p_value A pointer to a Variant representing the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @see Variant::set_named()
*/
InterfaceVariantSetNamed :: #type (p_self: VariantPtr, p_key: ConstStringNamePtr, p_value: ConstVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_set_keyed
* @since 4.1
*
* Sets a keyed property on a Variant to a value.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a Variant representing the key.
* @param p_value A pointer to a Variant representing the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @see Variant::set_keyed()
*/
InterfaceVariantSetKeyed :: #type (p_self: VariantPtr, p_key: ConstVariantPtr, p_value: ConstVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_set_indexed
* @since 4.1
*
* Sets an index on a Variant to a value.
*
* @param p_self A pointer to the Variant.
* @param p_index The index.
* @param p_value A pointer to a Variant representing the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
* @param r_oob A pointer to a boolean which will be set to true if the index is out of bounds.
*/
InterfaceVariantSetIndexed :: #type (p_self: VariantPtr, p_index: Int, p_value: ConstVariantPtr, r_valid: *Bool, r_oob: *Bool) -> void #c_call;

/**
* @name variant_get
* @since 4.1
*
* Gets the value of a key from a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a Variant representing the key.
* @param r_ret A pointer to a Variant which will be assigned the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*/
InterfaceVariantGet :: #type (p_self: ConstVariantPtr, p_key: ConstVariantPtr, r_ret: UninitializedVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_get_named
* @since 4.1
*
* Gets the value of a named key from a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a StringName representing the key.
* @param r_ret A pointer to a Variant which will be assigned the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*/
InterfaceVariantGetNamed :: #type (p_self: ConstVariantPtr, p_key: ConstStringNamePtr, r_ret: UninitializedVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_get_keyed
* @since 4.1
*
* Gets the value of a keyed property from a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a Variant representing the key.
* @param r_ret A pointer to a Variant which will be assigned the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*/
InterfaceVariantGetKeyed :: #type (p_self: ConstVariantPtr, p_key: ConstVariantPtr, r_ret: UninitializedVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_get_indexed
* @since 4.1
*
* Gets the value of an index from a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_index The index.
* @param r_ret A pointer to a Variant which will be assigned the value.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
* @param r_oob A pointer to a boolean which will be set to true if the index is out of bounds.
*/
InterfaceVariantGetIndexed :: #type (p_self: ConstVariantPtr, p_index: Int, r_ret: UninitializedVariantPtr, r_valid: *Bool, r_oob: *Bool) -> void #c_call;

/**
* @name variant_iter_init
* @since 4.1
*
* Initializes an iterator over a Variant.
*
* @param p_self A pointer to the Variant.
* @param r_iter A pointer to a Variant which will be assigned the iterator.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @return true if the operation is valid; otherwise false.
*
* @see Variant::iter_init()
*/
InterfaceVariantIterInit :: #type (p_self: ConstVariantPtr, r_iter: UninitializedVariantPtr, r_valid: *Bool) -> Bool #c_call;

/**
* @name variant_iter_next
* @since 4.1
*
* Gets the next value for an iterator over a Variant.
*
* @param p_self A pointer to the Variant.
* @param r_iter A pointer to a Variant which will be assigned the iterator.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @return true if the operation is valid; otherwise false.
*
* @see Variant::iter_next()
*/
InterfaceVariantIterNext :: #type (p_self: ConstVariantPtr, r_iter: VariantPtr, r_valid: *Bool) -> Bool #c_call;

/**
* @name variant_iter_get
* @since 4.1
*
* Gets the next value for an iterator over a Variant.
*
* @param p_self A pointer to the Variant.
* @param r_iter A pointer to a Variant which will be assigned the iterator.
* @param r_ret A pointer to a Variant which will be assigned false if the operation is invalid.
* @param r_valid A pointer to a boolean which will be set to false if the operation is invalid.
*
* @see Variant::iter_get()
*/
InterfaceVariantIterGet :: #type (p_self: ConstVariantPtr, r_iter: VariantPtr, r_ret: UninitializedVariantPtr, r_valid: *Bool) -> void #c_call;

/**
* @name variant_hash
* @since 4.1
*
* Gets the hash of a Variant.
*
* @param p_self A pointer to the Variant.
*
* @return The hash value.
*
* @see Variant::hash()
*/
InterfaceVariantHash :: #type (p_self: ConstVariantPtr) -> Int #c_call;

/**
* @name variant_recursive_hash
* @since 4.1
*
* Gets the recursive hash of a Variant.
*
* @param p_self A pointer to the Variant.
* @param p_recursion_count The number of recursive loops so far.
*
* @return The hash value.
*
* @see Variant::recursive_hash()
*/
InterfaceVariantRecursiveHash :: #type (p_self: ConstVariantPtr, p_recursion_count: Int) -> Int #c_call;

/**
* @name variant_hash_compare
* @since 4.1
*
* Compares two Variants by their hash.
*
* @param p_self A pointer to the Variant.
* @param p_other A pointer to the other Variant to compare it to.
*
* @return The hash value.
*
* @see Variant::hash_compare()
*/
InterfaceVariantHashCompare :: #type (p_self: ConstVariantPtr, p_other: ConstVariantPtr) -> Bool #c_call;

/**
* @name variant_booleanize
* @since 4.1
*
* Converts a Variant to a boolean.
*
* @param p_self A pointer to the Variant.
*
* @return The boolean value of the Variant.
*/
InterfaceVariantBooleanize :: #type (p_self: ConstVariantPtr) -> Bool #c_call;

/**
* @name variant_duplicate
* @since 4.1
*
* Duplicates a Variant.
*
* @param p_self A pointer to the Variant.
* @param r_ret A pointer to a Variant to store the duplicated value.
* @param p_deep Whether or not to duplicate deeply (when supported by the Variant type).
*/
InterfaceVariantDuplicate :: #type (p_self: ConstVariantPtr, r_ret: VariantPtr, p_deep: Bool) -> void #c_call;

/**
* @name variant_stringify
* @since 4.1
*
* Converts a Variant to a string.
*
* @param p_self A pointer to the Variant.
* @param r_ret A pointer to a String to store the resulting value.
*/
InterfaceVariantStringify :: #type (p_self: ConstVariantPtr, r_ret: StringPtr) -> void #c_call;

/**
* @name variant_get_type
* @since 4.1
*
* Gets the type of a Variant.
*
* @param p_self A pointer to the Variant.
*
* @return The variant type.
*/
InterfaceVariantGetType :: #type (p_self: ConstVariantPtr) -> VariantType #c_call;

/**
* @name variant_has_method
* @since 4.1
*
* Checks if a Variant has the given method.
*
* @param p_self A pointer to the Variant.
* @param p_method A pointer to a StringName with the method name.
*
* @return
*/
InterfaceVariantHasMethod :: #type (p_self: ConstVariantPtr, p_method: ConstStringNamePtr) -> Bool #c_call;

/**
* @name variant_has_member
* @since 4.1
*
* Checks if a type of Variant has the given member.
*
* @param p_type The Variant type.
* @param p_member A pointer to a StringName with the member name.
*
* @return
*/
InterfaceVariantHasMember :: #type (p_type: VariantType, p_member: ConstStringNamePtr) -> Bool #c_call;

/**
* @name variant_has_key
* @since 4.1
*
* Checks if a Variant has a key.
*
* @param p_self A pointer to the Variant.
* @param p_key A pointer to a Variant representing the key.
* @param r_valid A pointer to a boolean which will be set to false if the key doesn't exist.
*
* @return true if the key exists; otherwise false.
*/
InterfaceVariantHasKey :: #type (p_self: ConstVariantPtr, p_key: ConstVariantPtr, r_valid: *Bool) -> Bool #c_call;

/**
* @name variant_get_type_name
* @since 4.1
*
* Gets the name of a Variant type.
*
* @param p_type The Variant type.
* @param r_name A pointer to a String to store the Variant type name.
*/
InterfaceVariantGetTypeName :: #type (p_type: VariantType, r_name: UninitializedStringPtr) -> void #c_call;

/**
* @name variant_can_convert
* @since 4.1
*
* Checks if Variants can be converted from one type to another.
*
* @param p_from The Variant type to convert from.
* @param p_to The Variant type to convert to.
*
* @return true if the conversion is possible; otherwise false.
*/
InterfaceVariantCanConvert :: #type (p_from: VariantType, p_to: VariantType) -> Bool #c_call;

/**
* @name variant_can_convert_strict
* @since 4.1
*
* Checks if Variant can be converted from one type to another using stricter rules.
*
* @param p_from The Variant type to convert from.
* @param p_to The Variant type to convert to.
*
* @return true if the conversion is possible; otherwise false.
*/
InterfaceVariantCanConvertStrict :: #type (p_from: VariantType, p_to: VariantType) -> Bool #c_call;

/**
* @name get_variant_from_type_constructor
* @since 4.1
*
* Gets a pointer to a function that can create a Variant of the given type from a raw value.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can create a Variant of the given type from a raw value.
*/
InterfaceGetVariantFromTypeConstructor :: #type (p_type: VariantType) -> VariantFromTypeConstructorFunc #c_call;

/**
* @name get_variant_to_type_constructor
* @since 4.1
*
* Gets a pointer to a function that can get the raw value from a Variant of the given type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can get the raw value from a Variant of the given type.
*/
InterfaceGetVariantToTypeConstructor :: #type (p_type: VariantType) -> TypeFromVariantConstructorFunc #c_call;

/**
* @name variant_get_ptr_operator_evaluator
* @since 4.1
*
* Gets a pointer to a function that can evaluate the given Variant operator on the given Variant types.
*
* @param p_operator The variant operator.
* @param p_type_a The type of the first Variant.
* @param p_type_b The type of the second Variant.
*
* @return A pointer to a function that can evaluate the given Variant operator on the given Variant types.
*/
InterfaceVariantGetPtrOperatorEvaluator :: #type (p_operator: VariantOperator, p_type_a: VariantType, p_type_b: VariantType) -> PtrOperatorEvaluator #c_call;

/**
* @name variant_get_ptr_builtin_method
* @since 4.1
*
* Gets a pointer to a function that can call a builtin method on a type of Variant.
*
* @param p_type The Variant type.
* @param p_method A pointer to a StringName with the method name.
* @param p_hash A hash representing the method signature.
*
* @return A pointer to a function that can call a builtin method on a type of Variant.
*/
InterfaceVariantGetPtrBuiltinMethod :: #type (p_type: VariantType, p_method: ConstStringNamePtr, p_hash: Int) -> PtrBuiltInMethod #c_call;

/**
* @name variant_get_ptr_constructor
* @since 4.1
*
* Gets a pointer to a function that can call one of the constructors for a type of Variant.
*
* @param p_type The Variant type.
* @param p_constructor The index of the constructor.
*
* @return A pointer to a function that can call one of the constructors for a type of Variant.
*/
InterfaceVariantGetPtrConstructor :: #type (p_type: VariantType, p_constructor: s32) -> PtrConstructor #c_call;

/**
* @name variant_get_ptr_destructor
* @since 4.1
*
* Gets a pointer to a function than can call the destructor for a type of Variant.
*
* @param p_type The Variant type.
*
* @return A pointer to a function than can call the destructor for a type of Variant.
*/
InterfaceVariantGetPtrDestructor :: #type (p_type: VariantType) -> PtrDestructor #c_call;

/**
* @name variant_construct
* @since 4.1
*
* Constructs a Variant of the given type, using the first constructor that matches the given arguments.
*
* @param p_type The Variant type.
* @param p_base A pointer to a Variant to store the constructed value.
* @param p_args A pointer to a C array of Variant pointers representing the arguments for the constructor.
* @param p_argument_count The number of arguments to pass to the constructor.
* @param r_error A pointer the structure which will be updated with error information.
*/
InterfaceVariantConstruct :: #type (p_type: VariantType, r_base: UninitializedVariantPtr, p_args: *ConstVariantPtr, p_argument_count: s32, r_error: *CallError) -> void #c_call;

/**
* @name variant_get_ptr_setter
* @since 4.1
*
* Gets a pointer to a function that can call a member's setter on the given Variant type.
*
* @param p_type The Variant type.
* @param p_member A pointer to a StringName with the member name.
*
* @return A pointer to a function that can call a member's setter on the given Variant type.
*/
InterfaceVariantGetPtrSetter :: #type (p_type: VariantType, p_member: ConstStringNamePtr) -> PtrSetter #c_call;

/**
* @name variant_get_ptr_getter
* @since 4.1
*
* Gets a pointer to a function that can call a member's getter on the given Variant type.
*
* @param p_type The Variant type.
* @param p_member A pointer to a StringName with the member name.
*
* @return A pointer to a function that can call a member's getter on the given Variant type.
*/
InterfaceVariantGetPtrGetter :: #type (p_type: VariantType, p_member: ConstStringNamePtr) -> PtrGetter #c_call;

/**
* @name variant_get_ptr_indexed_setter
* @since 4.1
*
* Gets a pointer to a function that can set an index on the given Variant type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can set an index on the given Variant type.
*/
InterfaceVariantGetPtrIndexedSetter :: #type (p_type: VariantType) -> PtrIndexedSetter #c_call;

/**
* @name variant_get_ptr_indexed_getter
* @since 4.1
*
* Gets a pointer to a function that can get an index on the given Variant type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can get an index on the given Variant type.
*/
InterfaceVariantGetPtrIndexedGetter :: #type (p_type: VariantType) -> PtrIndexedGetter #c_call;

/**
* @name variant_get_ptr_keyed_setter
* @since 4.1
*
* Gets a pointer to a function that can set a key on the given Variant type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can set a key on the given Variant type.
*/
InterfaceVariantGetPtrKeyedSetter :: #type (p_type: VariantType) -> PtrKeyedSetter #c_call;

/**
* @name variant_get_ptr_keyed_getter
* @since 4.1
*
* Gets a pointer to a function that can get a key on the given Variant type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can get a key on the given Variant type.
*/
InterfaceVariantGetPtrKeyedGetter :: #type (p_type: VariantType) -> PtrKeyedGetter #c_call;

/**
* @name variant_get_ptr_keyed_checker
* @since 4.1
*
* Gets a pointer to a function that can check a key on the given Variant type.
*
* @param p_type The Variant type.
*
* @return A pointer to a function that can check a key on the given Variant type.
*/
InterfaceVariantGetPtrKeyedChecker :: #type (p_type: VariantType) -> PtrKeyedChecker #c_call;

/**
* @name variant_get_constant_value
* @since 4.1
*
* Gets the value of a constant from the given Variant type.
*
* @param p_type The Variant type.
* @param p_constant A pointer to a StringName with the constant name.
* @param r_ret A pointer to a Variant to store the value.
*/
InterfaceVariantGetConstantValue :: #type (p_type: VariantType, p_constant: ConstStringNamePtr, r_ret: UninitializedVariantPtr) -> void #c_call;

/**
* @name variant_get_ptr_utility_function
* @since 4.1
*
* Gets a pointer to a function that can call a Variant utility function.
*
* @param p_function A pointer to a StringName with the function name.
* @param p_hash A hash representing the function signature.
*
* @return A pointer to a function that can call a Variant utility function.
*/
InterfaceVariantGetPtrUtilityFunction :: #type (p_function: ConstStringNamePtr, p_hash: Int) -> PtrUtilityFunction #c_call;

/**
* @name string_new_with_latin1_chars
* @since 4.1
*
* Creates a String from a Latin-1 encoded C string.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a Latin-1 encoded C string (null terminated).
*/
InterfaceStringNewWithLatin1Chars :: #type (r_dest: UninitializedStringPtr, p_contents: *u8) -> void #c_call;

/**
* @name string_new_with_utf8_chars
* @since 4.1
*
* Creates a String from a UTF-8 encoded C string.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-8 encoded C string (null terminated).
*/
InterfaceStringNewWithUtf8Chars :: #type (r_dest: UninitializedStringPtr, p_contents: *u8) -> void #c_call;

/**
* @name string_new_with_utf16_chars
* @since 4.1
*
* Creates a String from a UTF-16 encoded C string.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-16 encoded C string (null terminated).
*/
InterfaceStringNewWithUtf16Chars :: #type (r_dest: UninitializedStringPtr, p_contents: *char16_t) -> void #c_call;

/**
* @name string_new_with_utf32_chars
* @since 4.1
*
* Creates a String from a UTF-32 encoded C string.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-32 encoded C string (null terminated).
*/
InterfaceStringNewWithUtf32Chars :: #type (r_dest: UninitializedStringPtr, p_contents: *char32_t) -> void #c_call;

/**
* @name string_new_with_wide_chars
* @since 4.1
*
* Creates a String from a wide C string.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a wide C string (null terminated).
*/
InterfaceStringNewWithWideChars :: #type (r_dest: UninitializedStringPtr, p_contents: *s32) -> void #c_call;

/**
* @name string_new_with_latin1_chars_and_len
* @since 4.1
*
* Creates a String from a Latin-1 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a Latin-1 encoded C string.
* @param p_size The number of characters (= number of bytes).
*/
InterfaceStringNewWithLatin1CharsAndLen :: #type (r_dest: UninitializedStringPtr, p_contents: *u8, p_size: Int) -> void #c_call;

/**
* @name string_new_with_utf8_chars_and_len
* @since 4.1
* @deprecated in Godot 4.3. Use `string_new_with_utf8_chars_and_len2` instead.
*
* Creates a String from a UTF-8 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-8 encoded C string.
* @param p_size The number of bytes (not code units).
*/
InterfaceStringNewWithUtf8CharsAndLen :: #type (r_dest: UninitializedStringPtr, p_contents: *u8, p_size: Int) -> void #c_call;

/**
* @name string_new_with_utf8_chars_and_len2
* @since 4.3
*
* Creates a String from a UTF-8 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-8 encoded C string.
* @param p_size The number of bytes (not code units).
*
* @return Error code signifying if the operation successful.
*/
InterfaceStringNewWithUtf8CharsAndLen2 :: #type (r_dest: UninitializedStringPtr, p_contents: *u8, p_size: Int) -> Int #c_call;

/**
* @name string_new_with_utf16_chars_and_len
* @since 4.1
* @deprecated in Godot 4.3. Use `string_new_with_utf16_chars_and_len2` instead.
*
* Creates a String from a UTF-16 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-16 encoded C string.
* @param p_size The number of characters (not bytes).
*/
InterfaceStringNewWithUtf16CharsAndLen :: #type (r_dest: UninitializedStringPtr, p_contents: *char16_t, p_char_count: Int) -> void #c_call;

/**
* @name string_new_with_utf16_chars_and_len2
* @since 4.3
*
* Creates a String from a UTF-16 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-16 encoded C string.
* @param p_size The number of characters (not bytes).
* @param p_default_little_endian If true, UTF-16 use little endian.
*
* @return Error code signifying if the operation successful.
*/
InterfaceStringNewWithUtf16CharsAndLen2 :: #type (r_dest: UninitializedStringPtr, p_contents: *char16_t, p_char_count: Int, p_default_little_endian: Bool) -> Int #c_call;

/**
* @name string_new_with_utf32_chars_and_len
* @since 4.1
*
* Creates a String from a UTF-32 encoded C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a UTF-32 encoded C string.
* @param p_size The number of characters (not bytes).
*/
InterfaceStringNewWithUtf32CharsAndLen :: #type (r_dest: UninitializedStringPtr, p_contents: *char32_t, p_char_count: Int) -> void #c_call;

/**
* @name string_new_with_wide_chars_and_len
* @since 4.1
*
* Creates a String from a wide C string with the given length.
*
* @param r_dest A pointer to a Variant to hold the newly created String.
* @param p_contents A pointer to a wide C string.
* @param p_size The number of characters (not bytes).
*/
InterfaceStringNewWithWideCharsAndLen :: #type (r_dest: UninitializedStringPtr, p_contents: *s32, p_char_count: Int) -> void #c_call;

/**
* @name string_to_latin1_chars
* @since 4.1
*
* Converts a String to a Latin-1 encoded C string.
*
* It doesn't write a null terminator.
*
* @param p_self A pointer to the String.
* @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.
* @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.
*
* @return The resulting encoded string length in characters (not bytes), not including a null terminator.
*/
InterfaceStringToLatin1Chars :: #type (p_self: ConstStringPtr, r_text: *u8, p_max_write_length: Int) -> Int #c_call;

/**
* @name string_to_utf8_chars
* @since 4.1
*
* Converts a String to a UTF-8 encoded C string.
*
* It doesn't write a null terminator.
*
* @param p_self A pointer to the String.
* @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.
* @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.
*
* @return The resulting encoded string length in characters (not bytes), not including a null terminator.
*/
InterfaceStringToUtf8Chars :: #type (p_self: ConstStringPtr, r_text: *u8, p_max_write_length: Int) -> Int #c_call;

/**
* @name string_to_utf16_chars
* @since 4.1
*
* Converts a String to a UTF-16 encoded C string.
*
* It doesn't write a null terminator.
*
* @param p_self A pointer to the String.
* @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.
* @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.
*
* @return The resulting encoded string length in characters (not bytes), not including a null terminator.
*/
InterfaceStringToUtf16Chars :: #type (p_self: ConstStringPtr, r_text: *char16_t, p_max_write_length: Int) -> Int #c_call;

/**
* @name string_to_utf32_chars
* @since 4.1
*
* Converts a String to a UTF-32 encoded C string.
*
* It doesn't write a null terminator.
*
* @param p_self A pointer to the String.
* @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.
* @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.
*
* @return The resulting encoded string length in characters (not bytes), not including a null terminator.
*/
InterfaceStringToUtf32Chars :: #type (p_self: ConstStringPtr, r_text: *char32_t, p_max_write_length: Int) -> Int #c_call;

/**
* @name string_to_wide_chars
* @since 4.1
*
* Converts a String to a wide C string.
*
* It doesn't write a null terminator.
*
* @param p_self A pointer to the String.
* @param r_text A pointer to the buffer to hold the resulting data. If NULL is passed in, only the length will be computed.
* @param p_max_write_length The maximum number of characters that can be written to r_text. It has no affect on the return value.
*
* @return The resulting encoded string length in characters (not bytes), not including a null terminator.
*/
InterfaceStringToWideChars :: #type (p_self: ConstStringPtr, r_text: *s32, p_max_write_length: Int) -> Int #c_call;

/**
* @name string_operator_index
* @since 4.1
*
* Gets a pointer to the character at the given index from a String.
*
* @param p_self A pointer to the String.
* @param p_index The index.
*
* @return A pointer to the requested character.
*/
InterfaceStringOperatorIndex :: #type (p_self: StringPtr, p_index: Int) -> *char32_t #c_call;

/**
* @name string_operator_index_const
* @since 4.1
*
* Gets a const pointer to the character at the given index from a String.
*
* @param p_self A pointer to the String.
* @param p_index The index.
*
* @return A const pointer to the requested character.
*/
InterfaceStringOperatorIndexConst :: #type (p_self: ConstStringPtr, p_index: Int) -> *char32_t #c_call;

/**
* @name string_operator_plus_eq_string
* @since 4.1
*
* Appends another String to a String.
*
* @param p_self A pointer to the String.
* @param p_b A pointer to the other String to append.
*/
InterfaceStringOperatorPlusEqString :: #type (p_self: StringPtr, p_b: ConstStringPtr) -> void #c_call;

/**
* @name string_operator_plus_eq_char
* @since 4.1
*
* Appends a character to a String.
*
* @param p_self A pointer to the String.
* @param p_b A pointer to the character to append.
*/
InterfaceStringOperatorPlusEqChar :: #type (p_self: StringPtr, p_b: char32_t) -> void #c_call;

/**
* @name string_operator_plus_eq_cstr
* @since 4.1
*
* Appends a Latin-1 encoded C string to a String.
*
* @param p_self A pointer to the String.
* @param p_b A pointer to a Latin-1 encoded C string (null terminated).
*/
InterfaceStringOperatorPlusEqCstr :: #type (p_self: StringPtr, p_b: *u8) -> void #c_call;

/**
* @name string_operator_plus_eq_wcstr
* @since 4.1
*
* Appends a wide C string to a String.
*
* @param p_self A pointer to the String.
* @param p_b A pointer to a wide C string (null terminated).
*/
InterfaceStringOperatorPlusEqWcstr :: #type (p_self: StringPtr, p_b: *s32) -> void #c_call;

/**
* @name string_operator_plus_eq_c32str
* @since 4.1
*
* Appends a UTF-32 encoded C string to a String.
*
* @param p_self A pointer to the String.
* @param p_b A pointer to a UTF-32 encoded C string (null terminated).
*/
InterfaceStringOperatorPlusEqC32str :: #type (p_self: StringPtr, p_b: *char32_t) -> void #c_call;

/**
* @name string_resize
* @since 4.2
*
* Resizes the underlying string data to the given number of characters.
*
* Space needs to be allocated for the null terminating character ('\0') which
* also must be added manually, in order for all string functions to work correctly.
*
* Warning: This is an error-prone operation - only use it if there's no other
* efficient way to accomplish your goal.
*
* @param p_self A pointer to the String.
* @param p_resize The new length for the String.
*
* @return Error code signifying if the operation successful.
*/
InterfaceStringResize :: #type (p_self: StringPtr, p_resize: Int) -> Int #c_call;

/**
* @name string_name_new_with_latin1_chars
* @since 4.2
*
* Creates a StringName from a Latin-1 encoded C string.
*
* If `p_is_static` is true, then:
* - The StringName will reuse the `p_contents` buffer instead of copying it.
*   You must guarantee that the buffer remains valid for the duration of the application (e.g. string literal).
* - You must not call a destructor for this StringName. Incrementing the initial reference once should achieve this.
*
* `p_is_static` is purely an optimization and can easily introduce undefined behavior if used wrong. In case of doubt, set it to false.
*
* @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.
* @param p_contents A pointer to a C string (null terminated and Latin-1 or ASCII encoded).
* @param p_is_static Whether the StringName reuses the buffer directly (see above).
*/
InterfaceStringNameNewWithLatin1Chars :: #type (r_dest: UninitializedStringNamePtr, p_contents: *u8, p_is_static: Bool) -> void #c_call;

/**
* @name string_name_new_with_utf8_chars
* @since 4.2
*
* Creates a StringName from a UTF-8 encoded C string.
*
* @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.
* @param p_contents A pointer to a C string (null terminated and UTF-8 encoded).
*/
InterfaceStringNameNewWithUtf8Chars :: #type (r_dest: UninitializedStringNamePtr, p_contents: *u8) -> void #c_call;

/**
* @name string_name_new_with_utf8_chars_and_len
* @since 4.2
*
* Creates a StringName from a UTF-8 encoded string with a given number of characters.
*
* @param r_dest A pointer to uninitialized storage, into which the newly created StringName is constructed.
* @param p_contents A pointer to a C string (null terminated and UTF-8 encoded).
* @param p_size The number of bytes (not UTF-8 code points).
*/
InterfaceStringNameNewWithUtf8CharsAndLen :: #type (r_dest: UninitializedStringNamePtr, p_contents: *u8, p_size: Int) -> void #c_call;

/**
* @name xml_parser_open_buffer
* @since 4.1
*
* Opens a raw XML buffer on an XMLParser instance.
*
* @param p_instance A pointer to an XMLParser object.
* @param p_buffer A pointer to the buffer.
* @param p_size The size of the buffer.
*
* @return A Godot error code (ex. OK, ERR_INVALID_DATA, etc).
*
* @see XMLParser::open_buffer()
*/
InterfaceXmlParserOpenBuffer :: #type (p_instance: ObjectPtr, p_buffer: *u8, p_size: u64) -> Int #c_call;

/**
* @name file_access_store_buffer
* @since 4.1
*
* Stores the given buffer using an instance of FileAccess.
*
* @param p_instance A pointer to a FileAccess object.
* @param p_src A pointer to the buffer.
* @param p_length The size of the buffer.
*
* @see FileAccess::store_buffer()
*/
InterfaceFileAccessStoreBuffer :: #type (p_instance: ObjectPtr, p_src: *u8, p_length: u64) -> void #c_call;

/**
* @name file_access_get_buffer
* @since 4.1
*
* Reads the next p_length bytes into the given buffer using an instance of FileAccess.
*
* @param p_instance A pointer to a FileAccess object.
* @param p_dst A pointer to the buffer to store the data.
* @param p_length The requested number of bytes to read.
*
* @return The actual number of bytes read (may be less than requested).
*/
InterfaceFileAccessGetBuffer :: #type (p_instance: ConstObjectPtr, p_dst: *u8, p_length: u64) -> u64 #c_call;

/**
* @name image_ptrw
* @since 4.3
*
* Returns writable pointer to internal Image buffer.
*
* @param p_instance A pointer to a Image object.
*
* @return Pointer to internal Image buffer.
*
* @see Image::ptrw()
*/
InterfaceImagePtrw :: #type (p_instance: ObjectPtr) -> *u8 #c_call;

/**
* @name image_ptr
* @since 4.3
*
* Returns read only pointer to internal Image buffer.
*
* @param p_instance A pointer to a Image object.
*
* @return Pointer to internal Image buffer.
*
* @see Image::ptr()
*/
InterfaceImagePtr :: #type (p_instance: ObjectPtr) -> *u8 #c_call;

/**
* @name worker_thread_pool_add_native_group_task
* @since 4.1
*
* Adds a group task to an instance of WorkerThreadPool.
*
* @param p_instance A pointer to a WorkerThreadPool object.
* @param p_func A pointer to a function to run in the thread pool.
* @param p_userdata A pointer to arbitrary data which will be passed to p_func.
* @param p_tasks The number of tasks needed in the group.
* @param p_high_priority Whether or not this is a high priority task.
* @param p_description A pointer to a String with the task description.
*
* @return The task group ID.
*
* @see WorkerThreadPool::add_group_task()
*/
InterfaceWorkerThreadPoolAddNativeGroupTask :: #type (p_instance: ObjectPtr, p_func: #type (unknown0: *void, unknown1: u32) -> void #c_call, p_userdata: *void, p_elements: s32, p_tasks: s32, p_high_priority: Bool, p_description: ConstStringPtr) -> s64 #c_call;

/**
* @name worker_thread_pool_add_native_task
* @since 4.1
*
* Adds a task to an instance of WorkerThreadPool.
*
* @param p_instance A pointer to a WorkerThreadPool object.
* @param p_func A pointer to a function to run in the thread pool.
* @param p_userdata A pointer to arbitrary data which will be passed to p_func.
* @param p_high_priority Whether or not this is a high priority task.
* @param p_description A pointer to a String with the task description.
*
* @return The task ID.
*/
InterfaceWorkerThreadPoolAddNativeTask :: #type (p_instance: ObjectPtr, p_func: #type (unknown0: *void) -> void #c_call, p_userdata: *void, p_high_priority: Bool, p_description: ConstStringPtr) -> s64 #c_call;

/**
* @name packed_byte_array_operator_index
* @since 4.1
*
* Gets a pointer to a byte in a PackedByteArray.
*
* @param p_self A pointer to a PackedByteArray object.
* @param p_index The index of the byte to get.
*
* @return A pointer to the requested byte.
*/
InterfacePackedByteArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> *u8 #c_call;

/**
* @name packed_byte_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a byte in a PackedByteArray.
*
* @param p_self A const pointer to a PackedByteArray object.
* @param p_index The index of the byte to get.
*
* @return A const pointer to the requested byte.
*/
InterfacePackedByteArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> *u8 #c_call;

/**
* @name packed_float32_array_operator_index
* @since 4.1
*
* Gets a pointer to a 32-bit float in a PackedFloat32Array.
*
* @param p_self A pointer to a PackedFloat32Array object.
* @param p_index The index of the float to get.
*
* @return A pointer to the requested 32-bit float.
*/
InterfacePackedFloat32ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> *float #c_call;

/**
* @name packed_float32_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a 32-bit float in a PackedFloat32Array.
*
* @param p_self A const pointer to a PackedFloat32Array object.
* @param p_index The index of the float to get.
*
* @return A const pointer to the requested 32-bit float.
*/
InterfacePackedFloat32ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> *float #c_call;

/**
* @name packed_float64_array_operator_index
* @since 4.1
*
* Gets a pointer to a 64-bit float in a PackedFloat64Array.
*
* @param p_self A pointer to a PackedFloat64Array object.
* @param p_index The index of the float to get.
*
* @return A pointer to the requested 64-bit float.
*/
InterfacePackedFloat64ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> *float64 #c_call;

/**
* @name packed_float64_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a 64-bit float in a PackedFloat64Array.
*
* @param p_self A const pointer to a PackedFloat64Array object.
* @param p_index The index of the float to get.
*
* @return A const pointer to the requested 64-bit float.
*/
InterfacePackedFloat64ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> *float64 #c_call;

/**
* @name packed_int32_array_operator_index
* @since 4.1
*
* Gets a pointer to a 32-bit integer in a PackedInt32Array.
*
* @param p_self A pointer to a PackedInt32Array object.
* @param p_index The index of the integer to get.
*
* @return A pointer to the requested 32-bit integer.
*/
InterfacePackedInt32ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> *s32 #c_call;

/**
* @name packed_int32_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a 32-bit integer in a PackedInt32Array.
*
* @param p_self A const pointer to a PackedInt32Array object.
* @param p_index The index of the integer to get.
*
* @return A const pointer to the requested 32-bit integer.
*/
InterfacePackedInt32ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> *s32 #c_call;

/**
* @name packed_int64_array_operator_index
* @since 4.1
*
* Gets a pointer to a 64-bit integer in a PackedInt64Array.
*
* @param p_self A pointer to a PackedInt64Array object.
* @param p_index The index of the integer to get.
*
* @return A pointer to the requested 64-bit integer.
*/
InterfacePackedInt64ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> *s64 #c_call;

/**
* @name packed_int64_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a 64-bit integer in a PackedInt64Array.
*
* @param p_self A const pointer to a PackedInt64Array object.
* @param p_index The index of the integer to get.
*
* @return A const pointer to the requested 64-bit integer.
*/
InterfacePackedInt64ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> *s64 #c_call;

/**
* @name packed_string_array_operator_index
* @since 4.1
*
* Gets a pointer to a string in a PackedStringArray.
*
* @param p_self A pointer to a PackedStringArray object.
* @param p_index The index of the String to get.
*
* @return A pointer to the requested String.
*/
InterfacePackedStringArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> StringPtr #c_call;

/**
* @name packed_string_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a string in a PackedStringArray.
*
* @param p_self A const pointer to a PackedStringArray object.
* @param p_index The index of the String to get.
*
* @return A const pointer to the requested String.
*/
InterfacePackedStringArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> StringPtr #c_call;

/**
* @name packed_vector2_array_operator_index
* @since 4.1
*
* Gets a pointer to a Vector2 in a PackedVector2Array.
*
* @param p_self A pointer to a PackedVector2Array object.
* @param p_index The index of the Vector2 to get.
*
* @return A pointer to the requested Vector2.
*/
InterfacePackedVector2ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_vector2_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a Vector2 in a PackedVector2Array.
*
* @param p_self A const pointer to a PackedVector2Array object.
* @param p_index The index of the Vector2 to get.
*
* @return A const pointer to the requested Vector2.
*/
InterfacePackedVector2ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_vector3_array_operator_index
* @since 4.1
*
* Gets a pointer to a Vector3 in a PackedVector3Array.
*
* @param p_self A pointer to a PackedVector3Array object.
* @param p_index The index of the Vector3 to get.
*
* @return A pointer to the requested Vector3.
*/
InterfacePackedVector3ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_vector3_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a Vector3 in a PackedVector3Array.
*
* @param p_self A const pointer to a PackedVector3Array object.
* @param p_index The index of the Vector3 to get.
*
* @return A const pointer to the requested Vector3.
*/
InterfacePackedVector3ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_vector4_array_operator_index
* @since 4.3
*
* Gets a pointer to a Vector4 in a PackedVector4Array.
*
* @param p_self A pointer to a PackedVector4Array object.
* @param p_index The index of the Vector4 to get.
*
* @return A pointer to the requested Vector4.
*/
InterfacePackedVector4ArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_vector4_array_operator_index_const
* @since 4.3
*
* Gets a const pointer to a Vector4 in a PackedVector4Array.
*
* @param p_self A const pointer to a PackedVector4Array object.
* @param p_index The index of the Vector4 to get.
*
* @return A const pointer to the requested Vector4.
*/
InterfacePackedVector4ArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_color_array_operator_index
* @since 4.1
*
* Gets a pointer to a color in a PackedColorArray.
*
* @param p_self A pointer to a PackedColorArray object.
* @param p_index The index of the Color to get.
*
* @return A pointer to the requested Color.
*/
InterfacePackedColorArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name packed_color_array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a color in a PackedColorArray.
*
* @param p_self A const pointer to a PackedColorArray object.
* @param p_index The index of the Color to get.
*
* @return A const pointer to the requested Color.
*/
InterfacePackedColorArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> TypePtr #c_call;

/**
* @name array_operator_index
* @since 4.1
*
* Gets a pointer to a Variant in an Array.
*
* @param p_self A pointer to an Array object.
* @param p_index The index of the Variant to get.
*
* @return A pointer to the requested Variant.
*/
InterfaceArrayOperatorIndex :: #type (p_self: TypePtr, p_index: Int) -> VariantPtr #c_call;

/**
* @name array_operator_index_const
* @since 4.1
*
* Gets a const pointer to a Variant in an Array.
*
* @param p_self A const pointer to an Array object.
* @param p_index The index of the Variant to get.
*
* @return A const pointer to the requested Variant.
*/
InterfaceArrayOperatorIndexConst :: #type (p_self: ConstTypePtr, p_index: Int) -> VariantPtr #c_call;

/**
* @name array_ref
* @since 4.1
*
* Sets an Array to be a reference to another Array object.
*
* @param p_self A pointer to the Array object to update.
* @param p_from A pointer to the Array object to reference.
*/
InterfaceArrayRef :: #type (p_self: TypePtr, p_from: ConstTypePtr) -> void #c_call;

/**
* @name array_set_typed
* @since 4.1
*
* Makes an Array into a typed Array.
*
* @param p_self A pointer to the Array.
* @param p_type The type of Variant the Array will store.
* @param p_class_name A pointer to a StringName with the name of the object (if p_type is GDEXTENSION_VARIANT_TYPE_OBJECT).
* @param p_script A pointer to a Script object (if p_type is GDEXTENSION_VARIANT_TYPE_OBJECT and the base class is extended by a script).
*/
InterfaceArraySetTyped :: #type (p_self: TypePtr, p_type: VariantType, p_class_name: ConstStringNamePtr, p_script: ConstVariantPtr) -> void #c_call;

/**
* @name dictionary_operator_index
* @since 4.1
*
* Gets a pointer to a Variant in a Dictionary with the given key.
*
* @param p_self A pointer to a Dictionary object.
* @param p_key A pointer to a Variant representing the key.
*
* @return A pointer to a Variant representing the value at the given key.
*/
InterfaceDictionaryOperatorIndex :: #type (p_self: TypePtr, p_key: ConstVariantPtr) -> VariantPtr #c_call;

/**
* @name dictionary_operator_index_const
* @since 4.1
*
* Gets a const pointer to a Variant in a Dictionary with the given key.
*
* @param p_self A const pointer to a Dictionary object.
* @param p_key A pointer to a Variant representing the key.
*
* @return A const pointer to a Variant representing the value at the given key.
*/
InterfaceDictionaryOperatorIndexConst :: #type (p_self: ConstTypePtr, p_key: ConstVariantPtr) -> VariantPtr #c_call;

/**
* @name object_method_bind_call
* @since 4.1
*
* Calls a method on an Object.
*
* @param p_method_bind A pointer to the MethodBind representing the method on the Object's class.
* @param p_instance A pointer to the Object.
* @param p_args A pointer to a C array of Variants representing the arguments.
* @param p_arg_count The number of arguments.
* @param r_ret A pointer to Variant which will receive the return value.
* @param r_error A pointer to a GDExtensionCallError struct that will receive error information.
*/
InterfaceObjectMethodBindCall :: #type (p_method_bind: MethodBindPtr, p_instance: ObjectPtr, p_args: *ConstVariantPtr, p_arg_count: Int, r_ret: UninitializedVariantPtr, r_error: *CallError) -> void #c_call;

/**
* @name object_method_bind_ptrcall
* @since 4.1
*
* Calls a method on an Object (using a "ptrcall").
*
* @param p_method_bind A pointer to the MethodBind representing the method on the Object's class.
* @param p_instance A pointer to the Object.
* @param p_args A pointer to a C array representing the arguments.
* @param r_ret A pointer to the Object that will receive the return value.
*/
InterfaceObjectMethodBindPtrcall :: #type (p_method_bind: MethodBindPtr, p_instance: ObjectPtr, p_args: *ConstTypePtr, r_ret: TypePtr) -> void #c_call;

/**
* @name object_destroy
* @since 4.1
*
* Destroys an Object.
*
* @param p_o A pointer to the Object.
*/
InterfaceObjectDestroy :: #type (p_o: ObjectPtr) -> void #c_call;

/**
* @name global_get_singleton
* @since 4.1
*
* Gets a global singleton by name.
*
* @param p_name A pointer to a StringName with the singleton name.
*
* @return A pointer to the singleton Object.
*/
InterfaceGlobalGetSingleton :: #type (p_name: ConstStringNamePtr) -> ObjectPtr #c_call;

/**
* @name object_get_instance_binding
* @since 4.1
*
* Gets a pointer representing an Object's instance binding.
*
* @param p_o A pointer to the Object.
* @param p_library A token the library received by the GDExtension's entry point function.
* @param p_callbacks A pointer to a GDExtensionInstanceBindingCallbacks struct.
*
* @return
*/
InterfaceObjectGetInstanceBinding :: #type (p_o: ObjectPtr, p_token: *void, p_callbacks: *InstanceBindingCallbacks) -> *void #c_call;

/**
* @name object_set_instance_binding
* @since 4.1
*
* Sets an Object's instance binding.
*
* @param p_o A pointer to the Object.
* @param p_library A token the library received by the GDExtension's entry point function.
* @param p_binding A pointer to the instance binding.
* @param p_callbacks A pointer to a GDExtensionInstanceBindingCallbacks struct.
*/
InterfaceObjectSetInstanceBinding :: #type (p_o: ObjectPtr, p_token: *void, p_binding: *void, p_callbacks: *InstanceBindingCallbacks) -> void #c_call;

/**
* @name object_free_instance_binding
* @since 4.2
*
* Free an Object's instance binding.
*
* @param p_o A pointer to the Object.
* @param p_library A token the library received by the GDExtension's entry point function.
*/
InterfaceObjectFreeInstanceBinding :: #type (p_o: ObjectPtr, p_token: *void) -> void #c_call;

/**
* @name object_set_instance
* @since 4.1
*
* Sets an extension class instance on a Object.
*
* @param p_o A pointer to the Object.
* @param p_classname A pointer to a StringName with the registered extension class's name.
* @param p_instance A pointer to the extension class instance.
*/
InterfaceObjectSetInstance :: #type (p_o: ObjectPtr, p_classname: ConstStringNamePtr, p_instance: ClassInstancePtr) -> void #c_call;

/**
* @name object_get_class_name
* @since 4.1
*
* Gets the class name of an Object.
*
* If the GDExtension wraps the Godot object in an abstraction specific to its class, this is the
* function that should be used to determine which wrapper to use.
*
* @param p_object A pointer to the Object.
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param r_class_name A pointer to a String to receive the class name.
*
* @return true if successful in getting the class name; otherwise false.
*/
InterfaceObjectGetClassName :: #type (p_object: ConstObjectPtr, p_library: ClassLibraryPtr, r_class_name: UninitializedStringNamePtr) -> Bool #c_call;

/**
* @name object_cast_to
* @since 4.1
*
* Casts an Object to a different type.
*
* @param p_object A pointer to the Object.
* @param p_class_tag A pointer uniquely identifying a built-in class in the ClassDB.
*
* @return Returns a pointer to the Object, or NULL if it can't be cast to the requested type.
*/
InterfaceObjectCastTo :: #type (p_object: ConstObjectPtr, p_class_tag: *void) -> ObjectPtr #c_call;

/**
* @name object_get_instance_from_id
* @since 4.1
*
* Gets an Object by its instance ID.
*
* @param p_instance_id The instance ID.
*
* @return A pointer to the Object.
*/
InterfaceObjectGetInstanceFromId :: #type (p_instance_id: GDObjectInstanceID) -> ObjectPtr #c_call;

/**
* @name object_get_instance_id
* @since 4.1
*
* Gets the instance ID from an Object.
*
* @param p_object A pointer to the Object.
*
* @return The instance ID.
*/
InterfaceObjectGetInstanceId :: #type (p_object: ConstObjectPtr) -> GDObjectInstanceID #c_call;

/**
* @name object_has_script_method
* @since 4.3
*
* Checks if this object has a script with the given method.
*
* @param p_object A pointer to the Object.
* @param p_method A pointer to a StringName identifying the method.
*
* @returns true if the object has a script and that script has a method with the given name. Returns false if the object has no script.
*/
InterfaceObjectHasScriptMethod :: #type (p_object: ConstObjectPtr, p_method: ConstStringNamePtr) -> Bool #c_call;

/**
* @name object_call_script_method
* @since 4.3
*
* Call the given script method on this object.
*
* @param p_object A pointer to the Object.
* @param p_method A pointer to a StringName identifying the method.
* @param p_args A pointer to a C array of Variant.
* @param p_argument_count The number of arguments.
* @param r_return A pointer a Variant which will be assigned the return value.
* @param r_error A pointer the structure which will hold error information.
*/
InterfaceObjectCallScriptMethod :: #type (p_object: ObjectPtr, p_method: ConstStringNamePtr, p_args: *ConstVariantPtr, p_argument_count: Int, r_return: UninitializedVariantPtr, r_error: *CallError) -> void #c_call;

/**
* @name ref_get_object
* @since 4.1
*
* Gets the Object from a reference.
*
* @param p_ref A pointer to the reference.
*
* @return A pointer to the Object from the reference or NULL.
*/
InterfaceRefGetObject :: #type (p_ref: ConstRefPtr) -> ObjectPtr #c_call;

/**
* @name ref_set_object
* @since 4.1
*
* Sets the Object referred to by a reference.
*
* @param p_ref A pointer to the reference.
* @param p_object A pointer to the Object to refer to.
*/
InterfaceRefSetObject :: #type (p_ref: RefPtr, p_object: ObjectPtr) -> void #c_call;

/**
* @name script_instance_create
* @since 4.1
* @deprecated in Godot 4.2. Use `script_instance_create3` instead.
*
* Creates a script instance that contains the given info and instance data.
*
* @param p_info A pointer to a GDExtensionScriptInstanceInfo struct.
* @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.
*
* @return A pointer to a ScriptInstanceExtension object.
*/
InterfaceScriptInstanceCreate :: #type (p_info: *ScriptInstanceInfo, p_instance_data: ScriptInstanceDataPtr) -> ScriptInstancePtr #c_call;

/**
* @name script_instance_create2
* @since 4.2
* @deprecated in Godot 4.3. Use `script_instance_create3` instead.
*
* Creates a script instance that contains the given info and instance data.
*
* @param p_info A pointer to a GDExtensionScriptInstanceInfo2 struct.
* @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.
*
* @return A pointer to a ScriptInstanceExtension object.
*/
InterfaceScriptInstanceCreate2 :: #type (p_info: *ScriptInstanceInfo2, p_instance_data: ScriptInstanceDataPtr) -> ScriptInstancePtr #c_call;

/**
* @name script_instance_create3
* @since 4.3
*
* Creates a script instance that contains the given info and instance data.
*
* @param p_info A pointer to a GDExtensionScriptInstanceInfo3 struct.
* @param p_instance_data A pointer to a data representing the script instance in the GDExtension. This will be passed to all the function pointers on p_info.
*
* @return A pointer to a ScriptInstanceExtension object.
*/
InterfaceScriptInstanceCreate3 :: #type (p_info: *ScriptInstanceInfo3, p_instance_data: ScriptInstanceDataPtr) -> ScriptInstancePtr #c_call;

/**
* @name placeholder_script_instance_create
* @since 4.2
*
* Creates a placeholder script instance for a given script and instance.
*
* This interface is optional as a custom placeholder could also be created with script_instance_create().
*
* @param p_language A pointer to a ScriptLanguage.
* @param p_script A pointer to a Script.
* @param p_owner A pointer to an Object.
*
* @return A pointer to a PlaceHolderScriptInstance object.
*/
InterfacePlaceHolderScriptInstanceCreate :: #type (p_language: ObjectPtr, p_script: ObjectPtr, p_owner: ObjectPtr) -> ScriptInstancePtr #c_call;

/**
* @name placeholder_script_instance_update
* @since 4.2
*
* Updates a placeholder script instance with the given properties and values.
*
* The passed in placeholder must be an instance of PlaceHolderScriptInstance
* such as the one returned by placeholder_script_instance_create().
*
* @param p_placeholder A pointer to a PlaceHolderScriptInstance.
* @param p_properties A pointer to an Array of Dictionary representing PropertyInfo.
* @param p_values A pointer to a Dictionary mapping StringName to Variant values.
*/
InterfacePlaceHolderScriptInstanceUpdate :: #type (p_placeholder: ScriptInstancePtr, p_properties: ConstTypePtr, p_values: ConstTypePtr) -> void #c_call;

/**
* @name object_get_script_instance
* @since 4.2
*
* Get the script instance data attached to this object.
*
* @param p_object A pointer to the Object.
* @param p_language A pointer to the language expected for this script instance.
*
* @return A GDExtensionScriptInstanceDataPtr that was attached to this object as part of script_instance_create.
*/
InterfaceObjectGetScriptInstance :: #type (p_object: ConstObjectPtr, p_language: ObjectPtr) -> ScriptInstanceDataPtr #c_call;

/**
* @name callable_custom_create
* @since 4.2
* @deprecated in Godot 4.3. Use `callable_custom_create2` instead.
*
* Creates a custom Callable object from a function pointer.
*
* Provided struct can be safely freed once the function returns.
*
* @param r_callable A pointer that will receive the new Callable.
* @param p_callable_custom_info The info required to construct a Callable.
*/
InterfaceCallableCustomCreate :: #type (r_callable: UninitializedTypePtr, p_callable_custom_info: *CallableCustomInfo) -> void #c_call;

/**
* @name callable_custom_create2
* @since 4.3
*
* Creates a custom Callable object from a function pointer.
*
* Provided struct can be safely freed once the function returns.
*
* @param r_callable A pointer that will receive the new Callable.
* @param p_callable_custom_info The info required to construct a Callable.
*/
InterfaceCallableCustomCreate2 :: #type (r_callable: UninitializedTypePtr, p_callable_custom_info: *CallableCustomInfo2) -> void #c_call;

/**
* @name callable_custom_get_userdata
* @since 4.2
*
* Retrieves the userdata pointer from a custom Callable.
*
* If the Callable is not a custom Callable or the token does not match the one provided to callable_custom_create() via GDExtensionCallableCustomInfo then NULL will be returned.
*
* @param p_callable A pointer to a Callable.
* @param p_token A pointer to an address that uniquely identifies the GDExtension.
*/
InterfaceCallableCustomGetUserData :: #type (p_callable: ConstTypePtr, p_token: *void) -> *void #c_call;

/**
* @name classdb_construct_object
* @since 4.1
*
* Constructs an Object of the requested class.
*
* The passed class must be a built-in godot class, or an already-registered extension class. In both cases, object_set_instance() should be called to fully initialize the object.
*
* @param p_classname A pointer to a StringName with the class name.
*
* @return A pointer to the newly created Object.
*/
InterfaceClassdbConstructObject :: #type (p_classname: ConstStringNamePtr) -> ObjectPtr #c_call;

/**
* @name classdb_get_method_bind
* @since 4.1
*
* Gets a pointer to the MethodBind in ClassDB for the given class, method and hash.
*
* @param p_classname A pointer to a StringName with the class name.
* @param p_methodname A pointer to a StringName with the method name.
* @param p_hash A hash representing the function signature.
*
* @return A pointer to the MethodBind from ClassDB.
*/
InterfaceClassdbGetMethodBind :: #type (p_classname: ConstStringNamePtr, p_methodname: ConstStringNamePtr, p_hash: Int) -> MethodBindPtr #c_call;

/**
* @name classdb_get_class_tag
* @since 4.1
*
* Gets a pointer uniquely identifying the given built-in class in the ClassDB.
*
* @param p_classname A pointer to a StringName with the class name.
*
* @return A pointer uniquely identifying the built-in class in the ClassDB.
*/
InterfaceClassdbGetClassTag :: #type (p_classname: ConstStringNamePtr) -> *void #c_call;

/**
* @name classdb_register_extension_class
* @since 4.1
* @deprecated in Godot 4.2. Use `classdb_register_extension_class3` instead.
*
* Registers an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_parent_class_name A pointer to a StringName with the parent class name.
* @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo struct.
*/
InterfaceClassdbRegisterExtensionClass :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_parent_class_name: ConstStringNamePtr, p_extension_funcs: *ClassCreationInfo) -> void #c_call;

/**
* @name classdb_register_extension_class2
* @since 4.2
* @deprecated in Godot 4.3. Use `classdb_register_extension_class3` instead.
*
* Registers an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_parent_class_name A pointer to a StringName with the parent class name.
* @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo2 struct.
*/
InterfaceClassdbRegisterExtensionClass2 :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_parent_class_name: ConstStringNamePtr, p_extension_funcs: *ClassCreationInfo2) -> void #c_call;

/**
* @name classdb_register_extension_class3
* @since 4.3
*
* Registers an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_parent_class_name A pointer to a StringName with the parent class name.
* @param p_extension_funcs A pointer to a GDExtensionClassCreationInfo2 struct.
*/
InterfaceClassdbRegisterExtensionClass3 :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_parent_class_name: ConstStringNamePtr, p_extension_funcs: *ClassCreationInfo3) -> void #c_call;

/**
* @name classdb_register_extension_class_method
* @since 4.1
*
* Registers a method on an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_method_info A pointer to a GDExtensionClassMethodInfo struct.
*/
InterfaceClassdbRegisterExtensionClassMethod :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_method_info: *ClassMethodInfo) -> void #c_call;

/**
* @name classdb_register_extension_class_virtual_method
* @since 4.3
*
* Registers a virtual method on an extension class in ClassDB, that can be implemented by scripts or other extensions.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_method_info A pointer to a GDExtensionClassMethodInfo struct.
*/
InterfaceClassdbRegisterExtensionClassVirtualMethod :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_method_info: *ClassVirtualMethodInfo) -> void #c_call;

/**
* @name classdb_register_extension_class_integer_constant
* @since 4.1
*
* Registers an integer constant on an extension class in the ClassDB.
*
* Note about registering bitfield values (if p_is_bitfield is true): even though p_constant_value is signed, language bindings are
* advised to treat bitfields as uint64_t, since this is generally clearer and can prevent mistakes like using -1 for setting all bits.
* Language APIs should thus provide an abstraction that registers bitfields (uint64_t) separately from regular constants (int64_t).
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_enum_name A pointer to a StringName with the enum name.
* @param p_constant_name A pointer to a StringName with the constant name.
* @param p_constant_value The constant value.
* @param p_is_bitfield Whether or not this constant is part of a bitfield.
*/
InterfaceClassdbRegisterExtensionClassIntegerConstant :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_enum_name: ConstStringNamePtr, p_constant_name: ConstStringNamePtr, p_constant_value: Int, p_is_bitfield: Bool) -> void #c_call;

/**
* @name classdb_register_extension_class_property
* @since 4.1
*
* Registers a property on an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_info A pointer to a GDExtensionPropertyInfo struct.
* @param p_setter A pointer to a StringName with the name of the setter method.
* @param p_getter A pointer to a StringName with the name of the getter method.
*/
InterfaceClassdbRegisterExtensionClassProperty :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_info: *PropertyInfo, p_setter: ConstStringNamePtr, p_getter: ConstStringNamePtr) -> void #c_call;

/**
* @name classdb_register_extension_class_property_indexed
* @since 4.2
*
* Registers an indexed property on an extension class in the ClassDB.
*
* Provided struct can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_info A pointer to a GDExtensionPropertyInfo struct.
* @param p_setter A pointer to a StringName with the name of the setter method.
* @param p_getter A pointer to a StringName with the name of the getter method.
* @param p_index The index to pass as the first argument to the getter and setter methods.
*/
InterfaceClassdbRegisterExtensionClassPropertyIndexed :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_info: *PropertyInfo, p_setter: ConstStringNamePtr, p_getter: ConstStringNamePtr, p_index: Int) -> void #c_call;

/**
* @name classdb_register_extension_class_property_group
* @since 4.1
*
* Registers a property group on an extension class in the ClassDB.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_group_name A pointer to a String with the group name.
* @param p_prefix A pointer to a String with the prefix used by properties in this group.
*/
InterfaceClassdbRegisterExtensionClassPropertyGroup :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_group_name: ConstStringPtr, p_prefix: ConstStringPtr) -> void #c_call;

/**
* @name classdb_register_extension_class_property_subgroup
* @since 4.1
*
* Registers a property subgroup on an extension class in the ClassDB.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_subgroup_name A pointer to a String with the subgroup name.
* @param p_prefix A pointer to a String with the prefix used by properties in this subgroup.
*/
InterfaceClassdbRegisterExtensionClassPropertySubgroup :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_subgroup_name: ConstStringPtr, p_prefix: ConstStringPtr) -> void #c_call;

/**
* @name classdb_register_extension_class_signal
* @since 4.1
*
* Registers a signal on an extension class in the ClassDB.
*
* Provided structs can be safely freed once the function returns.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
* @param p_signal_name A pointer to a StringName with the signal name.
* @param p_argument_info A pointer to a GDExtensionPropertyInfo struct.
* @param p_argument_count The number of arguments the signal receives.
*/
InterfaceClassdbRegisterExtensionClassSignal :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr, p_signal_name: ConstStringNamePtr, p_argument_info: *PropertyInfo, p_argument_count: Int) -> void #c_call;

/**
* @name classdb_unregister_extension_class
* @since 4.1
*
* Unregisters an extension class in the ClassDB.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param p_class_name A pointer to a StringName with the class name.
*/
InterfaceClassdbUnregisterExtensionClass :: #type (p_library: ClassLibraryPtr, p_class_name: ConstStringNamePtr) -> void #c_call;

/**
* @name get_library_path
* @since 4.1
*
* Gets the path to the current GDExtension library.
*
* @param p_library A pointer the library received by the GDExtension's entry point function.
* @param r_path A pointer to a String which will receive the path.
*/
InterfaceGetLibraryPath :: #type (p_library: ClassLibraryPtr, r_path: UninitializedStringPtr) -> void #c_call;

/**
* @name editor_add_plugin
* @since 4.1
*
* Adds an editor plugin.
*
* It's safe to call during initialization.
*
* @param p_class_name A pointer to a StringName with the name of a class (descending from EditorPlugin) which is already registered with ClassDB.
*/
InterfaceEditorAddPlugin :: #type (p_class_name: ConstStringNamePtr) -> void #c_call;

/**
* @name editor_remove_plugin
* @since 4.1
*
* Removes an editor plugin.
*
* @param p_class_name A pointer to a StringName with the name of a class that was previously added as an editor plugin.
*/
InterfaceEditorRemovePlugin :: #type (p_class_name: ConstStringNamePtr) -> void #c_call;

/**
* @name editor_help_load_xml_from_utf8_chars
* @since 4.3
*
* Loads new XML-formatted documentation data in the editor.
*
* The provided pointer can be immediately freed once the function returns.
*
* @param p_data A pointer to a UTF-8 encoded C string (null terminated).
*/
sInterfaceEditorHelpLoadXmlFromUtf8Chars :: #type (p_data: *u8) -> void #c_call;

/**
* @name editor_help_load_xml_from_utf8_chars_and_len
* @since 4.3
*
* Loads new XML-formatted documentation data in the editor.
*
* The provided pointer can be immediately freed once the function returns.
*
* @param p_data A pointer to a UTF-8 encoded C string.
* @param p_size The number of bytes (not code units).
*/
sInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen :: #type (p_data: *u8, p_size: Int) -> void #c_call;

#scope_file

#scope_export
// Declarations
get_godot_version : InterfaceGetGodotVersion;
mem_alloc : InterfaceMemAlloc;
mem_realloc : InterfaceMemRealloc;
mem_free : InterfaceMemFree;
print_error : InterfacePrintError;
print_error_with_message : InterfacePrintErrorWithMessage;
print_warning : InterfacePrintWarning;
print_warning_with_message : InterfacePrintWarningWithMessage;
print_script_error : InterfacePrintScriptError;
print_script_error_with_message : InterfacePrintScriptErrorWithMessage;
get_native_struct_size : InterfaceGetNativeStructSize;
variant_new_copy : InterfaceVariantNewCopy;
variant_new_nil : InterfaceVariantNewNil;
variant_destroy : InterfaceVariantDestroy;
variant_call : InterfaceVariantCall;
variant_call_static : InterfaceVariantCallStatic;
variant_evaluate : InterfaceVariantEvaluate;
variant_set : InterfaceVariantSet;
variant_set_named : InterfaceVariantSetNamed;
variant_set_keyed : InterfaceVariantSetKeyed;
variant_set_indexed : InterfaceVariantSetIndexed;
variant_get : InterfaceVariantGet;
variant_get_named : InterfaceVariantGetNamed;
variant_get_keyed : InterfaceVariantGetKeyed;
variant_get_indexed : InterfaceVariantGetIndexed;
variant_iter_init : InterfaceVariantIterInit;
variant_iter_next : InterfaceVariantIterNext;
variant_iter_get : InterfaceVariantIterGet;
variant_hash : InterfaceVariantHash;
variant_recursive_hash : InterfaceVariantRecursiveHash;
variant_hash_compare : InterfaceVariantHashCompare;
variant_booleanize : InterfaceVariantBooleanize;
variant_duplicate : InterfaceVariantDuplicate;
variant_stringify : InterfaceVariantStringify;
variant_get_type : InterfaceVariantGetType;
variant_has_method : InterfaceVariantHasMethod;
variant_has_member : InterfaceVariantHasMember;
variant_has_key : InterfaceVariantHasKey;
variant_get_type_name : InterfaceVariantGetTypeName;
variant_can_convert : InterfaceVariantCanConvert;
variant_can_convert_strict : InterfaceVariantCanConvertStrict;
get_variant_from_type_constructor : InterfaceGetVariantFromTypeConstructor;
get_variant_to_type_constructor : InterfaceGetVariantToTypeConstructor;
variant_get_ptr_operator_evaluator : InterfaceVariantGetPtrOperatorEvaluator;
variant_get_ptr_builtin_method : InterfaceVariantGetPtrBuiltinMethod;
variant_get_ptr_constructor : InterfaceVariantGetPtrConstructor;
variant_get_ptr_destructor : InterfaceVariantGetPtrDestructor;
variant_construct : InterfaceVariantConstruct;
variant_get_ptr_setter : InterfaceVariantGetPtrSetter;
variant_get_ptr_getter : InterfaceVariantGetPtrGetter;
variant_get_ptr_indexed_setter : InterfaceVariantGetPtrIndexedSetter;
variant_get_ptr_indexed_getter : InterfaceVariantGetPtrIndexedGetter;
variant_get_ptr_keyed_setter : InterfaceVariantGetPtrKeyedSetter;
variant_get_ptr_keyed_getter : InterfaceVariantGetPtrKeyedGetter;
variant_get_ptr_keyed_checker : InterfaceVariantGetPtrKeyedChecker;
variant_get_constant_value : InterfaceVariantGetConstantValue;
variant_get_ptr_utility_function : InterfaceVariantGetPtrUtilityFunction;
string_new_with_latin1_chars : InterfaceStringNewWithLatin1Chars;
string_new_with_utf8_chars : InterfaceStringNewWithUtf8Chars;
string_new_with_utf16_chars : InterfaceStringNewWithUtf16Chars;
string_new_with_utf32_chars : InterfaceStringNewWithUtf32Chars;
string_new_with_wide_chars : InterfaceStringNewWithWideChars;
string_new_with_latin1_chars_and_len : InterfaceStringNewWithLatin1CharsAndLen;
string_new_with_utf8_chars_and_len : InterfaceStringNewWithUtf8CharsAndLen;
string_new_with_utf8_chars_and_len2 : InterfaceStringNewWithUtf8CharsAndLen2;
string_new_with_utf16_chars_and_len : InterfaceStringNewWithUtf16CharsAndLen;
string_new_with_utf16_chars_and_len2 : InterfaceStringNewWithUtf16CharsAndLen2;
string_new_with_utf32_chars_and_len : InterfaceStringNewWithUtf32CharsAndLen;
string_new_with_wide_chars_and_len : InterfaceStringNewWithWideCharsAndLen;
string_to_latin1_chars : InterfaceStringToLatin1Chars;
string_to_utf8_chars : InterfaceStringToUtf8Chars;
string_to_utf16_chars : InterfaceStringToUtf16Chars;
string_to_utf32_chars : InterfaceStringToUtf32Chars;
string_to_wide_chars : InterfaceStringToWideChars;
string_operator_index : InterfaceStringOperatorIndex;
string_operator_index_const : InterfaceStringOperatorIndexConst;
string_operator_plus_eq_string : InterfaceStringOperatorPlusEqString;
string_operator_plus_eq_char : InterfaceStringOperatorPlusEqChar;
string_operator_plus_eq_cstr : InterfaceStringOperatorPlusEqCstr;
string_operator_plus_eq_wcstr : InterfaceStringOperatorPlusEqWcstr;
string_operator_plus_eq_c32str : InterfaceStringOperatorPlusEqC32str;
string_resize : InterfaceStringResize;
string_name_new_with_latin1_chars : InterfaceStringNameNewWithLatin1Chars;
string_name_new_with_utf8_chars : InterfaceStringNameNewWithUtf8Chars;
string_name_new_with_utf8_chars_and_len : InterfaceStringNameNewWithUtf8CharsAndLen;
xml_parser_open_buffer : InterfaceXmlParserOpenBuffer;
file_access_store_buffer : InterfaceFileAccessStoreBuffer;
file_access_get_buffer : InterfaceFileAccessGetBuffer;
image_ptrw : InterfaceImagePtrw;
image_ptr : InterfaceImagePtr;
worker_thread_pool_add_native_group_task : InterfaceWorkerThreadPoolAddNativeGroupTask;
worker_thread_pool_add_native_task : InterfaceWorkerThreadPoolAddNativeTask;
packed_byte_array_operator_index : InterfacePackedByteArrayOperatorIndex;
packed_byte_array_operator_index_const : InterfacePackedByteArrayOperatorIndexConst;
packed_float32_array_operator_index : InterfacePackedFloat32ArrayOperatorIndex;
packed_float32_array_operator_index_const : InterfacePackedFloat32ArrayOperatorIndexConst;
packed_float64_array_operator_index : InterfacePackedFloat64ArrayOperatorIndex;
packed_float64_array_operator_index_const : InterfacePackedFloat64ArrayOperatorIndexConst;
packed_int32_array_operator_index : InterfacePackedInt32ArrayOperatorIndex;
packed_int32_array_operator_index_const : InterfacePackedInt32ArrayOperatorIndexConst;
packed_int64_array_operator_index : InterfacePackedInt64ArrayOperatorIndex;
packed_int64_array_operator_index_const : InterfacePackedInt64ArrayOperatorIndexConst;
packed_string_array_operator_index : InterfacePackedStringArrayOperatorIndex;
packed_string_array_operator_index_const : InterfacePackedStringArrayOperatorIndexConst;
packed_vector2_array_operator_index : InterfacePackedVector2ArrayOperatorIndex;
packed_vector2_array_operator_index_const : InterfacePackedVector2ArrayOperatorIndexConst;
packed_vector3_array_operator_index : InterfacePackedVector3ArrayOperatorIndex;
packed_vector3_array_operator_index_const : InterfacePackedVector3ArrayOperatorIndexConst;
packed_vector4_array_operator_index : InterfacePackedVector4ArrayOperatorIndex;
packed_vector4_array_operator_index_const : InterfacePackedVector4ArrayOperatorIndexConst;
packed_color_array_operator_index : InterfacePackedColorArrayOperatorIndex;
packed_color_array_operator_index_const : InterfacePackedColorArrayOperatorIndexConst;
array_operator_index : InterfaceArrayOperatorIndex;
array_operator_index_const : InterfaceArrayOperatorIndexConst;
array_ref : InterfaceArrayRef;
array_set_typed : InterfaceArraySetTyped;
dictionary_operator_index : InterfaceDictionaryOperatorIndex;
dictionary_operator_index_const : InterfaceDictionaryOperatorIndexConst;
object_method_bind_call : InterfaceObjectMethodBindCall;
object_method_bind_ptrcall : InterfaceObjectMethodBindPtrcall;
object_destroy : InterfaceObjectDestroy;
global_get_singleton : InterfaceGlobalGetSingleton;
object_get_instance_binding : InterfaceObjectGetInstanceBinding;
object_set_instance_binding : InterfaceObjectSetInstanceBinding;
object_free_instance_binding : InterfaceObjectFreeInstanceBinding;
object_set_instance : InterfaceObjectSetInstance;
object_get_class_name : InterfaceObjectGetClassName;
object_cast_to : InterfaceObjectCastTo;
object_get_instance_from_id : InterfaceObjectGetInstanceFromId;
object_get_instance_id : InterfaceObjectGetInstanceId;
object_has_script_method : InterfaceObjectHasScriptMethod;
object_call_script_method : InterfaceObjectCallScriptMethod;
ref_get_object : InterfaceRefGetObject;
ref_set_object : InterfaceRefSetObject;
script_instance_create : InterfaceScriptInstanceCreate;
script_instance_create2 : InterfaceScriptInstanceCreate2;
script_instance_create3 : InterfaceScriptInstanceCreate3;
place_holder_script_instance_create : InterfacePlaceHolderScriptInstanceCreate;
place_holder_script_instance_update : InterfacePlaceHolderScriptInstanceUpdate;
object_get_script_instance : InterfaceObjectGetScriptInstance;
callable_custom_create : InterfaceCallableCustomCreate;
callable_custom_create2 : InterfaceCallableCustomCreate2;
callable_custom_get_user_data : InterfaceCallableCustomGetUserData;
classdb_construct_object : InterfaceClassdbConstructObject;
classdb_get_method_bind : InterfaceClassdbGetMethodBind;
classdb_get_class_tag : InterfaceClassdbGetClassTag;
classdb_register_extension_class : InterfaceClassdbRegisterExtensionClass;
classdb_register_extension_class2 : InterfaceClassdbRegisterExtensionClass2;
classdb_register_extension_class3 : InterfaceClassdbRegisterExtensionClass3;
classdb_register_extension_class_method : InterfaceClassdbRegisterExtensionClassMethod;
classdb_register_extension_class_virtual_method : InterfaceClassdbRegisterExtensionClassVirtualMethod;
classdb_register_extension_class_integer_constant : InterfaceClassdbRegisterExtensionClassIntegerConstant;
classdb_register_extension_class_property : InterfaceClassdbRegisterExtensionClassProperty;
classdb_register_extension_class_property_indexed : InterfaceClassdbRegisterExtensionClassPropertyIndexed;
classdb_register_extension_class_property_group : InterfaceClassdbRegisterExtensionClassPropertyGroup;
classdb_register_extension_class_property_subgroup : InterfaceClassdbRegisterExtensionClassPropertySubgroup;
classdb_register_extension_class_signal : InterfaceClassdbRegisterExtensionClassSignal;
classdb_unregister_extension_class : InterfaceClassdbUnregisterExtensionClass;
get_library_path : InterfaceGetLibraryPath;
editor_add_plugin : InterfaceEditorAddPlugin;
editor_remove_plugin : InterfaceEditorRemovePlugin;

// Load
load_interface_functions :: (get_proc_address: InterfaceGetProcAddress) {
	get_godot_version = get_proc_address("get_godot_version");
	mem_alloc = get_proc_address("mem_alloc");
	mem_realloc = get_proc_address("mem_realloc");
	mem_free = get_proc_address("mem_free");
	print_error = get_proc_address("print_error");
	print_error_with_message = get_proc_address("print_error_with_message");
	print_warning = get_proc_address("print_warning");
	print_warning_with_message = get_proc_address("print_warning_with_message");
	print_script_error = get_proc_address("print_script_error");
	print_script_error_with_message = get_proc_address("print_script_error_with_message");
	get_native_struct_size = get_proc_address("get_native_struct_size");
	variant_new_copy = get_proc_address("variant_new_copy");
	variant_new_nil = get_proc_address("variant_new_nil");
	variant_destroy = get_proc_address("variant_destroy");
	variant_call = get_proc_address("variant_call");
	variant_call_static = get_proc_address("variant_call_static");
	variant_evaluate = get_proc_address("variant_evaluate");
	variant_set = get_proc_address("variant_set");
	variant_set_named = get_proc_address("variant_set_named");
	variant_set_keyed = get_proc_address("variant_set_keyed");
	variant_set_indexed = get_proc_address("variant_set_indexed");
	variant_get = get_proc_address("variant_get");
	variant_get_named = get_proc_address("variant_get_named");
	variant_get_keyed = get_proc_address("variant_get_keyed");
	variant_get_indexed = get_proc_address("variant_get_indexed");
	variant_iter_init = get_proc_address("variant_iter_init");
	variant_iter_next = get_proc_address("variant_iter_next");
	variant_iter_get = get_proc_address("variant_iter_get");
	variant_hash = get_proc_address("variant_hash");
	variant_recursive_hash = get_proc_address("variant_recursive_hash");
	variant_hash_compare = get_proc_address("variant_hash_compare");
	variant_booleanize = get_proc_address("variant_booleanize");
	variant_duplicate = get_proc_address("variant_duplicate");
	variant_stringify = get_proc_address("variant_stringify");
	variant_get_type = get_proc_address("variant_get_type");
	variant_has_method = get_proc_address("variant_has_method");
	variant_has_member = get_proc_address("variant_has_member");
	variant_has_key = get_proc_address("variant_has_key");
	variant_get_type_name = get_proc_address("variant_get_type_name");
	variant_can_convert = get_proc_address("variant_can_convert");
	variant_can_convert_strict = get_proc_address("variant_can_convert_strict");
	get_variant_from_type_constructor = get_proc_address("get_variant_from_type_constructor");
	get_variant_to_type_constructor = get_proc_address("get_variant_to_type_constructor");
	variant_get_ptr_operator_evaluator = get_proc_address("variant_get_ptr_operator_evaluator");
	variant_get_ptr_builtin_method = get_proc_address("variant_get_ptr_builtin_method");
	variant_get_ptr_constructor = get_proc_address("variant_get_ptr_constructor");
	variant_get_ptr_destructor = get_proc_address("variant_get_ptr_destructor");
	variant_construct = get_proc_address("variant_construct");
	variant_get_ptr_setter = get_proc_address("variant_get_ptr_setter");
	variant_get_ptr_getter = get_proc_address("variant_get_ptr_getter");
	variant_get_ptr_indexed_setter = get_proc_address("variant_get_ptr_indexed_setter");
	variant_get_ptr_indexed_getter = get_proc_address("variant_get_ptr_indexed_getter");
	variant_get_ptr_keyed_setter = get_proc_address("variant_get_ptr_keyed_setter");
	variant_get_ptr_keyed_getter = get_proc_address("variant_get_ptr_keyed_getter");
	variant_get_ptr_keyed_checker = get_proc_address("variant_get_ptr_keyed_checker");
	variant_get_constant_value = get_proc_address("variant_get_constant_value");
	variant_get_ptr_utility_function = get_proc_address("variant_get_ptr_utility_function");
	string_new_with_latin1_chars = get_proc_address("string_new_with_latin1_chars");
	string_new_with_utf8_chars = get_proc_address("string_new_with_utf8_chars");
	string_new_with_utf16_chars = get_proc_address("string_new_with_utf16_chars");
	string_new_with_utf32_chars = get_proc_address("string_new_with_utf32_chars");
	string_new_with_wide_chars = get_proc_address("string_new_with_wide_chars");
	string_new_with_latin1_chars_and_len = get_proc_address("string_new_with_latin1_chars_and_len");
	string_new_with_utf8_chars_and_len = get_proc_address("string_new_with_utf8_chars_and_len");
	string_new_with_utf8_chars_and_len2 = get_proc_address("string_new_with_utf8_chars_and_len2");
	string_new_with_utf16_chars_and_len = get_proc_address("string_new_with_utf16_chars_and_len");
	string_new_with_utf16_chars_and_len2 = get_proc_address("string_new_with_utf16_chars_and_len2");
	string_new_with_utf32_chars_and_len = get_proc_address("string_new_with_utf32_chars_and_len");
	string_new_with_wide_chars_and_len = get_proc_address("string_new_with_wide_chars_and_len");
	string_to_latin1_chars = get_proc_address("string_to_latin1_chars");
	string_to_utf8_chars = get_proc_address("string_to_utf8_chars");
	string_to_utf16_chars = get_proc_address("string_to_utf16_chars");
	string_to_utf32_chars = get_proc_address("string_to_utf32_chars");
	string_to_wide_chars = get_proc_address("string_to_wide_chars");
	string_operator_index = get_proc_address("string_operator_index");
	string_operator_index_const = get_proc_address("string_operator_index_const");
	string_operator_plus_eq_string = get_proc_address("string_operator_plus_eq_string");
	string_operator_plus_eq_char = get_proc_address("string_operator_plus_eq_char");
	string_operator_plus_eq_cstr = get_proc_address("string_operator_plus_eq_cstr");
	string_operator_plus_eq_wcstr = get_proc_address("string_operator_plus_eq_wcstr");
	string_operator_plus_eq_c32str = get_proc_address("string_operator_plus_eq_c32str");
	string_resize = get_proc_address("string_resize");
	string_name_new_with_latin1_chars = get_proc_address("string_name_new_with_latin1_chars");
	string_name_new_with_utf8_chars = get_proc_address("string_name_new_with_utf8_chars");
	string_name_new_with_utf8_chars_and_len = get_proc_address("string_name_new_with_utf8_chars_and_len");
	xml_parser_open_buffer = get_proc_address("xml_parser_open_buffer");
	file_access_store_buffer = get_proc_address("file_access_store_buffer");
	file_access_get_buffer = get_proc_address("file_access_get_buffer");
	image_ptrw = get_proc_address("image_ptrw");
	image_ptr = get_proc_address("image_ptr");
	worker_thread_pool_add_native_group_task = get_proc_address("worker_thread_pool_add_native_group_task");
	worker_thread_pool_add_native_task = get_proc_address("worker_thread_pool_add_native_task");
	packed_byte_array_operator_index = get_proc_address("packed_byte_array_operator_index");
	packed_byte_array_operator_index_const = get_proc_address("packed_byte_array_operator_index_const");
	packed_float32_array_operator_index = get_proc_address("packed_float32_array_operator_index");
	packed_float32_array_operator_index_const = get_proc_address("packed_float32_array_operator_index_const");
	packed_float64_array_operator_index = get_proc_address("packed_float64_array_operator_index");
	packed_float64_array_operator_index_const = get_proc_address("packed_float64_array_operator_index_const");
	packed_int32_array_operator_index = get_proc_address("packed_int32_array_operator_index");
	packed_int32_array_operator_index_const = get_proc_address("packed_int32_array_operator_index_const");
	packed_int64_array_operator_index = get_proc_address("packed_int64_array_operator_index");
	packed_int64_array_operator_index_const = get_proc_address("packed_int64_array_operator_index_const");
	packed_string_array_operator_index = get_proc_address("packed_string_array_operator_index");
	packed_string_array_operator_index_const = get_proc_address("packed_string_array_operator_index_const");
	packed_vector2_array_operator_index = get_proc_address("packed_vector2_array_operator_index");
	packed_vector2_array_operator_index_const = get_proc_address("packed_vector2_array_operator_index_const");
	packed_vector3_array_operator_index = get_proc_address("packed_vector3_array_operator_index");
	packed_vector3_array_operator_index_const = get_proc_address("packed_vector3_array_operator_index_const");
	packed_vector4_array_operator_index = get_proc_address("packed_vector4_array_operator_index");
	packed_vector4_array_operator_index_const = get_proc_address("packed_vector4_array_operator_index_const");
	packed_color_array_operator_index = get_proc_address("packed_color_array_operator_index");
	packed_color_array_operator_index_const = get_proc_address("packed_color_array_operator_index_const");
	array_operator_index = get_proc_address("array_operator_index");
	array_operator_index_const = get_proc_address("array_operator_index_const");
	array_ref = get_proc_address("array_ref");
	array_set_typed = get_proc_address("array_set_typed");
	dictionary_operator_index = get_proc_address("dictionary_operator_index");
	dictionary_operator_index_const = get_proc_address("dictionary_operator_index_const");
	object_method_bind_call = get_proc_address("object_method_bind_call");
	object_method_bind_ptrcall = get_proc_address("object_method_bind_ptrcall");
	object_destroy = get_proc_address("object_destroy");
	global_get_singleton = get_proc_address("global_get_singleton");
	object_get_instance_binding = get_proc_address("object_get_instance_binding");
	object_set_instance_binding = get_proc_address("object_set_instance_binding");
	object_free_instance_binding = get_proc_address("object_free_instance_binding");
	object_set_instance = get_proc_address("object_set_instance");
	object_get_class_name = get_proc_address("object_get_class_name");
	object_cast_to = get_proc_address("object_cast_to");
	object_get_instance_from_id = get_proc_address("object_get_instance_from_id");
	object_get_instance_id = get_proc_address("object_get_instance_id");
	object_has_script_method = get_proc_address("object_has_script_method");
	object_call_script_method = get_proc_address("object_call_script_method");
	ref_get_object = get_proc_address("ref_get_object");
	ref_set_object = get_proc_address("ref_set_object");
	script_instance_create = get_proc_address("script_instance_create");
	script_instance_create2 = get_proc_address("script_instance_create2");
	script_instance_create3 = get_proc_address("script_instance_create3");
	object_get_script_instance = get_proc_address("object_get_script_instance");
	callable_custom_create = get_proc_address("callable_custom_create");
	callable_custom_create2 = get_proc_address("callable_custom_create2");
	classdb_construct_object = get_proc_address("classdb_construct_object");
	classdb_get_method_bind = get_proc_address("classdb_get_method_bind");
	classdb_get_class_tag = get_proc_address("classdb_get_class_tag");
	classdb_register_extension_class = get_proc_address("classdb_register_extension_class");
	classdb_register_extension_class2 = get_proc_address("classdb_register_extension_class2");
	classdb_register_extension_class3 = get_proc_address("classdb_register_extension_class3");
	classdb_register_extension_class_method = get_proc_address("classdb_register_extension_class_method");
	classdb_register_extension_class_virtual_method = get_proc_address("classdb_register_extension_class_virtual_method");
	classdb_register_extension_class_integer_constant = get_proc_address("classdb_register_extension_class_integer_constant");
	classdb_register_extension_class_property = get_proc_address("classdb_register_extension_class_property");
	classdb_register_extension_class_property_indexed = get_proc_address("classdb_register_extension_class_property_indexed");
	classdb_register_extension_class_property_group = get_proc_address("classdb_register_extension_class_property_group");
	classdb_register_extension_class_property_subgroup = get_proc_address("classdb_register_extension_class_property_subgroup");
	classdb_register_extension_class_signal = get_proc_address("classdb_register_extension_class_signal");
	classdb_unregister_extension_class = get_proc_address("classdb_unregister_extension_class");
	get_library_path = get_proc_address("get_library_path");
	editor_add_plugin = get_proc_address("editor_add_plugin");
	editor_remove_plugin = get_proc_address("editor_remove_plugin");
}
